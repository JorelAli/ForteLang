/* Generated By:JavaCC: Do not edit this line. ForteLang.java */
import java.util.*;
import java.util.function.*;
import java.util.stream.*;
import java.lang.reflect.Field;

public class ForteLang implements ForteLangConstants {

        /** Class declarations */
        static class FL_Function {
                List<String> parameters;
                Object expression;

                public FL_Function() { parameters = new LinkedList<String>(); }
        }

        static class FL_Set {
                boolean impure;
                LinkedHashMap<String, Object> attributes;

                public FL_Set() { attributes = new LinkedHashMap<String, Object>(); }

                public void checkPurity() throws Exception {
                        if(!impure) {
                                for(String str: attributes.keySet()) {
                                        if(str.startsWith("@")) {
                                                throw new Exception("impure set detected and isn't declared as 'impure'");
                                        }
                                }
                        }
                }
        }

        static class FL_Guards {
                LinkedHashMap<Object, Object> statements;
                Object finalStatement;

                public FL_Guards() { statements = new LinkedHashMap<Object, Object>(); }
        }

        static class FL_Matches {
                LinkedHashMap<Object, Object> statements;
                Object finalStatement;

                public FL_Matches() { statements = new LinkedHashMap<Object, Object>(); }
        }

        static class FL_Enum {
                List<String> elements;

                public FL_Enum() { elements = new LinkedList<String>(); }
        }

        /** Main method */
        public static void main(String[] args) throws ParseException {
                try {
                        /* Run the parser */
                        new ForteLang(System.in).input();
                        System.out.println("PASS");
                } catch(Exception e) {
                        e.printStackTrace();
                        return;
                }

                //Begin interpreting system
        }

        public static <T> T print(T o) throws Exception {
                StringBuilder builder = new StringBuilder();
                builder.append(o.getClass().getName() + "[");
                for(Field f : o.getClass().getDeclaredFields()) {
                        builder.append(f.getName() + ": " + f.get(o).toString() + "; ");
                }
                System.out.println(builder.append("]").toString());
                return o;
        }

        static class OperatorParser {

                enum Operator { BOOLEAN, NUMERICAL, SET };

                Operator operatorKind;
                String op;

                public OperatorParser(Token operator) {
                        switch(operator.kind) {
                                case ForteLangConstants.BOOLEAN_OP:
                                        operatorKind = Operator.BOOLEAN;
                                        break;
                                case ForteLangConstants.OP:
                                        operatorKind = Operator.NUMERICAL;
                                        break;
                                case ForteLangConstants.SET_OP:
                                        operatorKind = Operator.SET;
                                        break;
                                default:
                                        operatorKind = null;
                                        break;
                        }
                        op = operator.image;
                }

                public float apply(float f1, float f2) throws Exception {
                        if(operatorKind != Operator.NUMERICAL) {
                                throw new Exception("Invalid operator (expected numerical operator)");
                        }
                        switch(op) {
                                case "+":
                                        return f1 + f2;
                                case "*":
                                        return f1 * f2;
                                case "-":
                                        return f1 - f2;
                                case "/":
                                        return f1 / f2;
                        }
                        throw new Exception("Invalid operator " + op);
                }
        }

/** Main endpoint */
  static final public void input() throws ParseException, Exception {
    expression();
    eof();
  }

  static final public void eof() throws ParseException, Exception {
    jj_consume_token(0);
  }

  static final public void anyOperator() throws ParseException, Exception {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN_OP:
      jj_consume_token(BOOLEAN_OP);
      break;
    case OP:
      jj_consume_token(OP);
      break;
    case SET_OP:
      jj_consume_token(SET_OP);
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void includedSet() throws ParseException, Exception {
    jj_consume_token(INCLUDE);
    set();
    jj_consume_token(IN);
    expression();
  }

  static final public FL_Set set() throws ParseException, Exception {
                                  FL_Set set; Token attrName; Object attrValue;
          set = new FL_Set();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IMPURE:
      jj_consume_token(IMPURE);
            set.impure = true;
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    jj_consume_token(OPENCBRACKET);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAR_NAME:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_1;
      }
      attrName = jj_consume_token(VAR_NAME);
      jj_consume_token(EQUALS);
      attrValue = functionResult();
            set.attributes.put(attrName.image, attrValue);
    }
    jj_consume_token(CLOSECBRACKET);
          set.checkPurity();
          {if (true) return print(set);}
    throw new Error("Missing return statement in function");
  }

  static final public FL_Enum enumeration() throws ParseException, Exception {
                                           FL_Enum flEnum; Token element;
      flEnum = new FL_Enum();
    jj_consume_token(ENUM_OPEN);
    element = jj_consume_token(CAPS);
          flEnum.elements.add(element.image);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      jj_consume_token(COMMA);
      element = jj_consume_token(CAPS);
            flEnum.elements.add(element.image);
    }
    jj_consume_token(ENUM_CLOSE);
          {if (true) return flEnum;}
    throw new Error("Missing return statement in function");
  }

  static final public Object functionResult() throws ParseException, Exception {
                                             Object result;
    if (jj_2_1(2)) {
      result = lambda();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMBER:
      case FLOATING_POINT_NUMBER:
      case BOOLEAN:
      case STRING:
      case INCLUDE:
      case IMPURE:
      case IMPORT:
      case EXEC:
      case PRINT:
      case OPENSBRACKET:
      case OPENCBRACKET:
      case VAR_NAME:
        result = expression();
        break;
      case GUARD:
        result = guards();
        break;
      case ENUM_OPEN:
        result = enumeration();
        break;
      case MATCH:
        result = matches();
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(SEMICOLON);
          {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public FL_Function lambda() throws ParseException, Exception {
                                          FL_Function function; Token paramName; Object innerExpression;
          function = new FL_Function();
    label_3:
    while (true) {
      paramName = jj_consume_token(VAR_NAME);
            function.parameters.add(paramName.image);
      jj_consume_token(FUNCTION_ARROW);
      if (jj_2_2(3)) {
        ;
      } else {
        break label_3;
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER:
    case FLOATING_POINT_NUMBER:
    case BOOLEAN:
    case STRING:
    case INCLUDE:
    case IMPURE:
    case IMPORT:
    case EXEC:
    case PRINT:
    case OPENSBRACKET:
    case OPENCBRACKET:
    case VAR_NAME:
      innerExpression = expression();
      break;
    case GUARD:
      innerExpression = guards();
      break;
    case MATCH:
      innerExpression = matches();
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          function.expression = innerExpression;
          {if (true) return function;}
    throw new Error("Missing return statement in function");
  }

  static final public List<Object> list() throws ParseException, Exception {
                                         List<Object> list; Object nextItem;
          list = new LinkedList<Object>();
    jj_consume_token(OPENSBRACKET);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CLOSESBRACKET:
      jj_consume_token(CLOSESBRACKET);
                                  {if (true) return list;}
      break;
    case NUMBER:
    case FLOATING_POINT_NUMBER:
    case BOOLEAN:
    case STRING:
    case IMPURE:
    case OPENBRACKET:
    case OPENSBRACKET:
    case OPENCBRACKET:
    case VAR_NAME:
      //Non-empty list
                      nextItem = enclosedExpression();
                  list.add(nextItem);
      label_4:
      while (true) {
        if (jj_2_3(2)) {
          ;
        } else {
          break label_4;
        }
        jj_consume_token(COMMA);
        nextItem = enclosedExpression();
                          list.add(nextItem);
      }
      jj_consume_token(CLOSESBRACKET);
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  static final public Object enclosedExpression() throws ParseException, Exception {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPENBRACKET:
      jj_consume_token(OPENBRACKET);
      expression();
      jj_consume_token(CLOSEBRACKET);
                                                       {if (true) return null;}
      break;
    case NUMBER:
    case FLOATING_POINT_NUMBER:
    case BOOLEAN:
    case STRING:
    case IMPURE:
    case OPENSBRACKET:
    case OPENCBRACKET:
    case VAR_NAME:
      singleExpression();
                                                                                             {if (true) return null;}
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public float number() throws ParseException, Exception {
                                    Token value; float f;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER:
      value = jj_consume_token(NUMBER);
                                                            {if (true) return Float.valueOf(value.image);}
      break;
    case FLOATING_POINT_NUMBER:
      value = jj_consume_token(FLOATING_POINT_NUMBER);
                                            {if (true) return Float.valueOf(value.image);}
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Object expression() throws ParseException, Exception {
                                         Object result;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR_NAME:
      if (jj_2_7(2)) {
        lambda();
                                  {if (true) return null;}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VAR_NAME:
          jj_consume_token(VAR_NAME);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case NUMBER:
          case FLOATING_POINT_NUMBER:
          case BOOLEAN:
          case STRING:
          case IMPURE:
          case OPENBRACKET:
          case OPENSBRACKET:
          case OPENCBRACKET:
          case VAR_NAME:
            label_5:
            while (true) {
              if (jj_2_4(2)) {
                singleExpression();
              } else {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case NUMBER:
                case FLOATING_POINT_NUMBER:
                case BOOLEAN:
                case STRING:
                case IMPURE:
                case OPENBRACKET:
                case OPENSBRACKET:
                case OPENCBRACKET:
                case VAR_NAME:
                  enclosedExpression();
                  break;
                default:
                  jj_la1[9] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
              }
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case NUMBER:
              case FLOATING_POINT_NUMBER:
              case BOOLEAN:
              case STRING:
              case IMPURE:
              case OPENBRACKET:
              case OPENSBRACKET:
              case OPENCBRACKET:
              case VAR_NAME:
                ;
                break;
              default:
                jj_la1[10] = jj_gen;
                break label_5;
              }
            }
                                                                            {if (true) return null;}
            break;
          case SELECT:
            jj_consume_token(SELECT);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case CAPS:
              jj_consume_token(CAPS);
                           {if (true) return null;}
              break;
            case VAR_NAME:
              jj_consume_token(VAR_NAME);
              label_6:
              while (true) {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case SELECT:
                  ;
                  break;
                default:
                  jj_la1[11] = jj_gen;
                  break label_6;
                }
                jj_consume_token(SELECT);
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case VAR_NAME:
                  jj_consume_token(VAR_NAME);
                  break;
                case CAPS:
                  jj_consume_token(CAPS);
                  break;
                default:
                  jj_la1[12] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
              }
                                                                 {if (true) return null;}
              break;
            default:
              jj_la1[13] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
          default:
            jj_la1[15] = jj_gen;
            label_7:
            while (true) {
              if (jj_2_5(2)) {
                ;
              } else {
                break label_7;
              }
              anyOperator();
              if (jj_2_6(3)) {
                expression();
              } else {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case NUMBER:
                case FLOATING_POINT_NUMBER:
                case BOOLEAN:
                case STRING:
                case IMPURE:
                case OPENBRACKET:
                case OPENSBRACKET:
                case OPENCBRACKET:
                case VAR_NAME:
                  enclosedExpression();
                  break;
                default:
                  jj_la1[14] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
              }
            }
                                                                                                     {if (true) return null;}
          }
          break;
        default:
          jj_la1[16] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    case IMPURE:
    case OPENCBRACKET:
      set();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SELECT:
        label_8:
        while (true) {
          jj_consume_token(SELECT);
          jj_consume_token(VAR_NAME);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SELECT:
            ;
            break;
          default:
            jj_la1[17] = jj_gen;
            break label_8;
          }
        }
                                   {if (true) return null;}
        break;
      default:
        jj_la1[18] = jj_gen;
        label_9:
        while (true) {
          if (jj_2_8(2)) {
            ;
          } else {
            break label_9;
          }
          jj_consume_token(SET_OP);
          set();
        }
                                             {if (true) return null;}
      }
      break;
    case INCLUDE:
      includedSet();
      label_10:
      while (true) {
        if (jj_2_9(2)) {
          ;
        } else {
          break label_10;
        }
        jj_consume_token(SET_OP);
        includedSet();
      }
                                                                 {if (true) return null;}
      break;
    case OPENSBRACKET:
      list();
      label_11:
      while (true) {
        if (jj_2_10(2)) {
          ;
        } else {
          break label_11;
        }
        jj_consume_token(CONCAT);
        expression();
      }
                                                         {if (true) return null;}
      break;
    case NUMBER:
    case FLOATING_POINT_NUMBER:
      result = numberExpression();
                                        {if (true) return result;}
      break;
    case STRING:
      jj_consume_token(STRING);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONTAINS:
        jj_consume_token(CONTAINS);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IMPURE:
        case OPENCBRACKET:
          set();
          break;
        case VAR_NAME:
          jj_consume_token(VAR_NAME);
          break;
        default:
          jj_la1[19] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[20] = jj_gen;
        label_12:
        while (true) {
          if (jj_2_11(2)) {
            ;
          } else {
            break label_12;
          }
          jj_consume_token(CONCAT);
          jj_consume_token(STRING);
        }
      }
                                                                                           {if (true) return null;}
      break;
    case BOOLEAN:
      jj_consume_token(BOOLEAN);
      label_13:
      while (true) {
        if (jj_2_12(2)) {
          ;
        } else {
          break label_13;
        }
        jj_consume_token(BOOLEAN_OP);
        jj_consume_token(BOOLEAN);
      }
                                                             {if (true) return null;}
      break;
    case IMPORT:
    case EXEC:
    case PRINT:
      builtinFunctions();
                               {if (true) return null;}
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public float numberExpression() throws ParseException, Exception {
                                              float acc; Token op; float next;
    acc = number();
    label_14:
    while (true) {
      if (jj_2_13(2)) {
        ;
      } else {
        break label_14;
      }
      op = jj_consume_token(OP);
      next = number();
                 acc = new OperatorParser(op).apply(acc, next);
    }
                System.out.println(acc);
          {if (true) return acc;}
    throw new Error("Missing return statement in function");
  }

  static final public void builtinFunctions() throws ParseException, Exception {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IMPORT:
      jj_consume_token(IMPORT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING:
        jj_consume_token(STRING);
        break;
      case VAR_NAME:
        jj_consume_token(VAR_NAME);
        break;
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case PRINT:
      jj_consume_token(PRINT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING:
        jj_consume_token(STRING);
        break;
      case VAR_NAME:
        jj_consume_token(VAR_NAME);
        break;
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case EXEC:
      jj_consume_token(EXEC);
      jj_consume_token(STRING);
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void singleExpression() throws ParseException, Exception {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IMPURE:
    case OPENCBRACKET:
      set();
      break;
    case VAR_NAME:
      jj_consume_token(VAR_NAME);
      break;
    case OPENSBRACKET:
      list();
      break;
    case NUMBER:
    case FLOATING_POINT_NUMBER:
      number();
      break;
    case STRING:
      jj_consume_token(STRING);
      break;
    case BOOLEAN:
      jj_consume_token(BOOLEAN);
      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public FL_Matches matches() throws ParseException, Exception {
                                          FL_Matches matches;
          matches = new FL_Matches();
    jj_consume_token(MATCH);
    jj_consume_token(VAR_NAME);
    label_15:
    while (true) {
      jj_consume_token(GUARD);
      expression();
      jj_consume_token(GUARD_ARROW);
      expression();
      if (jj_2_14(2)) {
        ;
      } else {
        break label_15;
      }
    }
    if (jj_2_15(2)) {
      jj_consume_token(GUARD);
      jj_consume_token(GUARD_ARROW);
      expression();
    } else {
      ;
    }
          {if (true) return matches;}
    throw new Error("Missing return statement in function");
  }

  static final public FL_Guards guards() throws ParseException, Exception {
                                        FL_Guards guards; Object predicate; Object expression; Object finalExpression;
          guards = new FL_Guards();
    label_16:
    while (true) {
      jj_consume_token(GUARD);
      predicate = expression();
      jj_consume_token(GUARD_ARROW);
      expression = expression();
      jj_consume_token(GUARD);
                  guards.statements.put(predicate, expression);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GUARD:
        ;
        break;
      default:
        jj_la1[26] = jj_gen;
        break label_16;
      }
    }
    jj_consume_token(GUARD_ARROW);
    finalExpression = expression();
                  guards.finalStatement = finalExpression;
          {if (true) return guards;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  static private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  static private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  static private boolean jj_3R_29() {
    if (jj_3R_42()) return true;
    return false;
  }

  static private boolean jj_3R_42() {
    if (jj_scan_token(OPENSBRACKET)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) return true;
    }
    return false;
  }

  static private boolean jj_3_11() {
    if (jj_scan_token(CONCAT)) return true;
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  static private boolean jj_3R_48() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_11()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_70() {
    if (jj_scan_token(GUARD)) return true;
    return false;
  }

  static private boolean jj_3R_67() {
    Token xsp;
    if (jj_3R_70()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_70()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_63() {
    if (jj_3R_68()) return true;
    return false;
  }

  static private boolean jj_3R_62() {
    if (jj_3R_67()) return true;
    return false;
  }

  static private boolean jj_3R_61() {
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3R_27() {
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3_15() {
    if (jj_scan_token(GUARD)) return true;
    if (jj_scan_token(GUARD_ARROW)) return true;
    return false;
  }

  static private boolean jj_3_14() {
    if (jj_scan_token(GUARD)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3R_68() {
    if (jj_scan_token(MATCH)) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_scan_token(VAR_NAME)) return true;
    if (jj_scan_token(FUNCTION_ARROW)) return true;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3R_69() {
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3R_19() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_scan_token(30)) {
    jj_scanpos = xsp;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_scan_token(10)) {
    jj_scanpos = xsp;
    if (jj_scan_token(9)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_28() {
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3R_57() {
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3R_60() {
    if (jj_scan_token(EXEC)) return true;
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  static private boolean jj_3R_17() {
    Token xsp;
    if (jj_3_2()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_2()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_58() {
    if (jj_scan_token(IMPORT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(10)) {
    jj_scanpos = xsp;
    if (jj_scan_token(30)) return true;
    }
    return false;
  }

  static private boolean jj_3R_49() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_59() {
    if (jj_scan_token(PRINT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(10)) {
    jj_scanpos = xsp;
    if (jj_scan_token(30)) return true;
    }
    return false;
  }

  static private boolean jj_3_12() {
    if (jj_scan_token(BOOLEAN_OP)) return true;
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  static private boolean jj_3_9() {
    if (jj_scan_token(SET_OP)) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_47() {
    if (jj_scan_token(CONTAINS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_scan_token(30)) return true;
    }
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3_13() {
    if (jj_scan_token(OP)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3_10() {
    if (jj_scan_token(CONCAT)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3R_46() {
    if (jj_3R_25()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_13()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_38() {
    if (jj_3R_49()) return true;
    return false;
  }

  static private boolean jj_3R_37() {
    if (jj_scan_token(BOOLEAN)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_12()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_36() {
    if (jj_scan_token(STRING)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) return true;
    }
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_3R_20()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) return true;
    }
    return false;
  }

  static private boolean jj_3R_35() {
    if (jj_3R_46()) return true;
    return false;
  }

  static private boolean jj_3R_66() {
    if (jj_scan_token(VAR_NAME)) return true;
    return false;
  }

  static private boolean jj_3R_55() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_5()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_8() {
    if (jj_scan_token(SET_OP)) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3R_34() {
    if (jj_3R_42()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_10()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_45() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_8()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_33() {
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_65() {
    if (jj_scan_token(CAPS)) return true;
    return false;
  }

  static private boolean jj_3R_56() {
    if (jj_scan_token(SELECT)) return true;
    return false;
  }

  static private boolean jj_3R_54() {
    if (jj_scan_token(SELECT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) return true;
    }
    return false;
  }

  static private boolean jj_3R_44() {
    Token xsp;
    if (jj_3R_56()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_56()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_32() {
    if (jj_3R_23()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) return true;
    }
    return false;
  }

  static private boolean jj_3R_64() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3R_69()) return true;
    }
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3R_53() {
    Token xsp;
    if (jj_3R_64()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_64()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_43() {
    if (jj_scan_token(VAR_NAME)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_50() {
    if (jj_scan_token(VAR_NAME)) return true;
    if (jj_scan_token(EQUALS)) return true;
    return false;
  }

  static private boolean jj_3R_22() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_31() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) return true;
    }
    return false;
  }

  static private boolean jj_3R_41() {
    if (jj_scan_token(FLOATING_POINT_NUMBER)) return true;
    return false;
  }

  static private boolean jj_3R_40() {
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  static private boolean jj_3R_25() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) return true;
    }
    return false;
  }

  static private boolean jj_3R_39() {
    if (jj_scan_token(IMPURE)) return true;
    return false;
  }

  static private boolean jj_3R_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_39()) jj_scanpos = xsp;
    if (jj_scan_token(OPENCBRACKET)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_50()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(CLOSECBRACKET)) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) return true;
    }
    return false;
  }

  static private boolean jj_3R_26() {
    if (jj_scan_token(OPENBRACKET)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_scan_token(INCLUDE)) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3R_52() {
    if (jj_3R_18()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_3()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(CLOSESBRACKET)) return true;
    return false;
  }

  static private boolean jj_3R_51() {
    if (jj_scan_token(CLOSESBRACKET)) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(1)) {
    jj_scanpos = xsp;
    if (jj_scan_token(3)) {
    jj_scanpos = xsp;
    if (jj_scan_token(2)) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3R_30() {
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ForteLangTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[27];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xe,0x2000,0x40000000,0x400000,0x5113ef80,0x5013ef80,0x50342780,0x50142780,0x180,0x50142780,0x50142780,0x20,0x40800000,0x40800000,0x50142780,0x501427a0,0x40000000,0x20,0x20,0x50002000,0x40,0x5013af80,0x40000400,0x40000400,0x38000,0x50102780,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[15];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public ForteLang(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ForteLang(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ForteLangTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public ForteLang(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ForteLangTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public ForteLang(ForteLangTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ForteLangTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[39];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 27; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 39; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 15; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}

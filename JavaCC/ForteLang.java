/* Generated By:JavaCC: Do not edit this line. ForteLang.java */
import java.util.LinkedList;
import java.util.HashMap;
import java.util.ListIterator;
import java.util.Stack;
import java.util.LinkedHashMap;
import java.util.Collection;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Scanner;

import java.util.regex.Pattern;

import java.io.FileInputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.ByteArrayInputStream;

import javax.swing.JOptionPane;
import javax.swing.UIManager;

public class ForteLang implements ForteLangConstants {

        /** Static fields */
        static String fileName;
        static boolean LOGGING_ENABLE = true;
        static Scanner globalScanner = null;

        static void printSECD() {print("SECD"); }
        static void printSECD(Object o) { print("SECD", o); }
        static void printSECD(String s, Object o) { print("SECD", s, o); }

        static void printEVAL() {print("EVAL"); }
        static void printEVAL(Object o) { print("EVAL", o); }
        static void printEVAL(String s, Object o) { print("EVAL", s, o); }

        static void print(String title) { print(title, "", ""); }
        static void print(String title, Object val) { print(title, "", val); }
        static void print(String title, String init, Object val) {
                if(LOGGING_ENABLE) {
                        System.out.println("[" + title + "] " + init + (init.isEmpty() ? "" : " ") + String.valueOf(val));
                }
        }

        static Scanner getGlobalScanner() {
                if(globalScanner == null) {
                        globalScanner = new Scanner(System.in);
                }
                return globalScanner;
        }

        static String prettifyOutput(Object result) {
                if(result instanceof String) {
                        return "\u005c"" + result + "\u005c"";
                } else if(result instanceof Double) {
                        double d = (double) result;
                        if((d % 1) == 0) {
                                result = (long) d;
                        }
                }
                return String.valueOf(result);
        }

        /** Main method */
        public static void main(String[] args) throws ParseException, FileNotFoundException {
                boolean replMode = false;
                for(String str : args) {
                        if(str.equals("-repl")) {
                                replMode = true;
                        }
                }

                if(args.length < 1) {
                        System.out.println("Usage: java ForteLang <File>");
                        return;
                }

                if(replMode) {
                        LOGGING_ENABLE = false;
                        System.out.println("Welcome to the ForteLang repl (v0.0.1). Type :help for help.");
                        System.out.println();
                        Scanner scanner = getGlobalScanner();
                        repl: while(true) {
                                System.out.print("fl-repl> ");
                                String input = null;
                                try {
                                        input = scanner.nextLine();
                                } catch(Exception e) { scanner.close(); }
                                switch(input) {
                                        case ":help":
                                                System.out.println("The following commands are available:");
                                                System.out.println();
                                                System.out.println("  :q\u005ctExit ForteLang repl");
                                                System.out.println();
                                                continue repl;
                                        case ":q":
                                                break repl;
                                }

                                try {
                                        Object result = new ForteLang(new ByteArrayInputStream(input.getBytes())).input();
                                        System.out.println("=> " + prettifyOutput(result) + "\u005cn");
                                } catch(Error e) {
                                        System.out.println("=>> Error, invalid input \u005c"" + input + "\u005c"");
                                        System.out.println(e.getMessage() + "\u005cn");
                                } catch(Exception e) {
                                        System.out.println("=>> Error, invalid input \u005c"" + input + "\u005c"");
                                        System.out.println(e.getMessage() + "\u005cn");
                                }
                        }
                } else {
                        File file = new File(args[0]);
                        fileName = file.getName();
                        try {
                                /* Run the parser */

                                Object result = new ForteLang(new FileInputStream(file)).input();
                                System.out.println();
                                System.out.println("=== Evaluation complete ===");
                                System.out.println("==> " + prettifyOutput(result));

                        } catch(Exception e) {
                                e.printStackTrace();
                                return;
                        }
                }


        }

        static class EvaluationException extends Exception {
                public EvaluationException(String message) {
                        super(message);
                }
        }

//	static interface Evaluatable { }

        /** Class declarations */

        //Function declaration, e.g. x -> y -> x + y
        static class FL_Function implements Evaluatable {
                //Basically the closure of parameters
                Map<String, Object> functionScope;
                String parameter;
                Object expression;

                public FL_Function() {
                        functionScope = new HashMap<String, Object>();
                }

                @Override public String toString() { return "FL_Function(" + parameter + ") -> (" + expression + ")"; }

                static class FL_Function_Builder {
                        Stack<String> parameters;
                        Object expression;

                        public FL_Function_Builder() {
                                parameters = new Stack<String>();
                        }

                        public FL_Function build() {
                                Object currentExpression = expression;
                                while(!parameters.empty()) {
                                        FL_Function newExpression = new FL_Function();
                                        newExpression.parameter = parameters.pop();
                                        newExpression.expression = currentExpression;
                                        currentExpression = newExpression;
                                }
                                return (FL_Function) currentExpression;
                        }
                }
        }

        //Function call, e.g. myFunc 2 3
        static class FL_Function_Call implements Evaluatable {
                Object initFunction;
                LinkedList<Object> arguments;

                public FL_Function_Call() {
                        arguments = new LinkedList<Object>();
                }

//		@Override public String toString() { return "FuncCall " + initFunction + " " + arguments; }
        }

//	static class FL_Set implements Evaluatable {
//		boolean impure;
//		LinkedHashMap<String, Object> attributes;
//
//		public FL_Set() {
//		  attributes = new LinkedHashMap<String, Object>();
//		  impure = false;
//		}
//
//		public FL_Set clone() {
//			FL_Set newSet = new FL_Set();
//			newSet.impure = impure;
//			newSet.attributes = new LinkedHashMap<String, Object>(attributes);
//			return newSet;
//		}
//
//		public void checkPurity(Token setDeclaration) throws Exception {
//		  //TODO: Make this code WAY more elegant, like seriously... what even
//			if(!impure) {
//				for(String str: attributes.keySet()) {
//					if(str.startsWith("@")) {
//						throw new Exception("impure set detected and isn't declared as 'impure'");
//					}
//				}
//				
//				for(Object o : attributes.values()) {
//					if(o instanceof FL_Set) {
//						if(((FL_Set) o).impure) {
//							throw new Exception("Set detected as impure due to inner attribute and isn't declared as 'impure'" + location(setDeclaration));
//						}
//					}
//				}
//			} else {
//				for(String str: attributes.keySet()) {
//					if(str.startsWith("@")) {
//						return;
//					}
//				}
//				for(Object o : attributes.values()) {
//					if(o instanceof FL_Set) {
//						if(((FL_Set) o).impure) {
//							return;
//						}
//					}
//				}
//				throw new Exception("impure keyword detected, but the set is actually pure" + location(setDeclaration));
//			}
//		}
//
//		public boolean isImpure() {
//			for(String str: attributes.keySet()) {
//				if(str.startsWith("@")) {
//					return true;
//				}
//			}
//			
//			for(Object o : attributes.values()) {
//				if(o instanceof FL_Set) {
//					if(((FL_Set) o).impure) {
//						return true;
//					}
//				}
//			}
//			return false;
//		}
//
//		@Override public String toString() {
//		  StringBuilder builder = new StringBuilder("{ ");
//		  //		LinkedHashMap<String, Object> attributes;
//		  for(Entry<String, Object> entry : attributes.entrySet()) {
//			  builder.append(entry.getKey());
//			  builder.append(" = ");
//			  builder.append(entry.getValue());
//			  builder.append("; ");
//		  }
//		  return (impure ? "impure " : "") + builder.append("}").toString();
//		}
//	}

        /** Helper functions */

        static String location(Token token) {
                return " (Line " + token.beginLine + " in " + fileName + ")";
        }

        static String parseString(Token str) {
                return str.image.substring(1, str.image.length() - 1);
        }

        /** Other declared objects */

        static class FL_Guards implements Evaluatable {
                LinkedHashMap<Object, Object> statements;
                Object finalStatement;

                public FL_Guards() { statements = new LinkedHashMap<Object, Object>(); }

                @Override public String toString() {
                  StringBuilder builder = new StringBuilder("Guard{ ");
                  for(Entry<Object, Object> entry : statements.entrySet()) {
                      builder.append("| ");
                          builder.append(entry.getKey());
                          builder.append(" ->> ");
                          builder.append(entry.getValue());
                          builder.append(" ");
                  }
                  builder.append("| ->> ");
                  builder.append(finalStatement);
                  return builder.append(" }").toString();
                }
        }

//	static class FL_Match implements Evaluatable {
//		LinkedHashMap<Object, Object> statements;
//		Object finalStatement;
//		Object matchOn;
//
//		public FL_Match() { statements = new LinkedHashMap<Object, Object>(); }
//
//		@Override public String toString() {
//		  return "FL_Match[stmts=" + statements + ", finalStmt=" + finalStatement + "]";
//		}
//	}

        static class FL_IncludedSet implements Evaluatable {
                FL_Set set;
                Object expression;

                @Override public String toString() {
                  return "FL_IncludedSet[set=" + set + ", expr=" + expression + "]";
                }
        }

        static class FL_Builtin implements Evaluatable {
                Object param;
                enum Builtin { IMPORT, PRINT, EXEC, HEAD, TAIL, INPUT, INPUTBOX }

                Builtin type;

                public FL_Builtin(Builtin type, Object param) {
                        this.type = type;
                        this.param = param;
                }
        }

        static class OperatorParser {

                enum Operator { BOOLEAN, NUMERICAL, SET, COMPARATOR, CONCAT, CONTAINS };

                Operator operatorKind;
                String op;

                public OperatorParser(Token operator) throws Exception {
                        switch(operator.kind) {
                                case ForteLangConstants.BOOLEAN_OP:
                                        operatorKind = Operator.BOOLEAN;
                                        break;
                                case ForteLangConstants.OP:
                                        operatorKind = Operator.NUMERICAL;
                                        break;
                                case ForteLangConstants.SET_OP:
                                        operatorKind = Operator.SET;
                                        break;
                                case ForteLangConstants.COMPARATOR_OP:
                                        operatorKind = Operator.COMPARATOR;
                                        break;
                                case ForteLangConstants.CONCAT:
                                        operatorKind = Operator.CONCAT;
                                        break;
                                case ForteLangConstants.CONTAINS:
                                        operatorKind = Operator.CONTAINS;
                                        break;
                                default:
                                        throw new Exception ("Invalid operator for OperatorParser: " + operator.image);
                        }
                        op = operator.image;
                }

                public Object apply(Object o1, Object o2) throws Exception {
                        switch(operatorKind) {
                                case BOOLEAN:
                                        return applyBoolean((boolean) o1, (boolean) o2);
                                case NUMERICAL:
                                        return applyDouble((double) o1, (double) o2);
                                case SET:
                                        return applySetObjects((FL_Set) o1, (FL_Set) o2);
                                case COMPARATOR:
                                        return applyComparator(o1, o2);
                                case CONCAT:
                                        return applyConcat(o1, o2);
                                case CONTAINS:
                                        return applyContains(o1, o2);
                        }
                        throw new Exception ("Failed to apply any operators");
                }

                public Object applyContains(Object o1, Object o2) throws Exception {
                        if(o1 instanceof FL_List) {
                                FL_List l1 = (FL_List) o1;
                                return l1.contains(o2);
                        } else if(o1 instanceof FL_Set) {
                                FL_Set s1 = (FL_Set) o1;
                                return s1.attributes.keySet().contains(o2);
                        } else {
                                throw new Exception("Cannot check for existance within a " + o1.getClass().getName());
                        }
                }

                public Object applyConcat(Object o1, Object o2) throws Exception {
                        if(o1 instanceof FL_List && o2 instanceof FL_List) {
                                FL_List l1 = (FL_List) o1;
                                FL_List l2 = (FL_List) o2;
                                l1.addAll(l2);
                                return l1;
                        } else if(o1 instanceof String && o2 instanceof String) {
                                String s1 = (String) o1;
                                String s2 = (String) o2;
                                return s1 + s2;
                        } else {
                                throw new Exception("Cannot concatenate " + o1.getClass().getName() + " with " + o2.getClass().getName());
                        }
                }

                public boolean applyComparator(Object o1, Object o2) throws Exception {
                        switch(op) {
                                case ">":
                                        return (double) o1 > (double) o2;
                                case "<":
                                        return (double) o1 < (double) o2;
                                case "<=":
                                        return (double) o1 <= (double) o2;
                                case ">=":
                                        return (double) o1 >= (double) o2;
                                case "==":
                                        return o1.equals(o2);
                                case "!=":
                                        return !o1.equals(o2);
                        }
                        throw new Exception ("Invalid operator (expected comparator operator");
                }

                public double applyDouble(double f1, double f2) throws Exception {
                        if(operatorKind != Operator.NUMERICAL) {
                                throw new Exception("Invalid operator (expected numerical operator)");
                        }

                        switch(op) {
                                case "+":
                                        return f1 + f2;
                                case "*":
                                        return f1 * f2;
                                case "-":
                                        return f1 - f2;
                                case "/":
                                        return f1 / f2;
                                case "%":
                                        return (int) f1 % (int) f2;
                        }
                        throw new Exception("Invalid operator " + op);
                }

                public boolean applyBoolean(boolean b1, boolean b2) throws Exception {
                        if(operatorKind != Operator.BOOLEAN) {
                                throw new Exception("Invalid operator (expected boolean operator)");
                        }
                        switch(op) {
                                case "||":
                                        return b1 || b2;
                                case "&&":
                                        return b1 && b2;
                        }
                        throw new Exception("Invalid operator " + op);
                }

                public FL_Set applySetObjects(FL_Set s1, FL_Set s2) throws Exception {
                        if(operatorKind != Operator.SET) {
                                throw new Exception("Invalid operator (expected set operator)");
                        }

                        FL_Set newSet = new FL_Set();
                        newSet.attributes = new LinkedHashMap<String, Object>(s1.attributes);

                        switch(op) {
                                //union
                                case "/+": {
                                        newSet.impure = (s1.impure || s2.impure);
                                        newSet.attributes.putAll(s2.attributes);
                                        break;
                                }
                                //intersect
                                case "/-": {
                                        newSet.attributes.putAll(s1.attributes);
                                        newSet.attributes.keySet().retainAll(s2.attributes.keySet());
                                        for(String key : newSet.attributes.keySet()) {
                                                newSet.attributes.put(key, s1.attributes.get(key));
                                        }
                                        newSet.impure = newSet.isImpure();
                                        break;
                                }
                                //difference
                                case "//": {
                                        for(String key : s2.attributes.keySet()) {
                                                newSet.attributes.remove(key);
                                        }
                                        newSet.impure = newSet.isImpure();
                                        break;
                                }
                        }
                        return newSet;
                }
        }

        static class Dump {
                Stack<Object> stack;
                LinkedList<Object> control;
                HashMap<String, Object> environment;

                public Dump(Stack<Object> s, LinkedList<Object> control, HashMap<String, Object> env) {
                        this.stack = s;
                        this.control = control;
                        this.environment = env;
                }
        }

        //Placeholder for "applying" an object
        static class ApplyObj {
                @Override
                public String toString() {
                return "ap";
            }
        }

        public static Object secd(FL_Function_Call functionCall, FL_Set globalScope) throws Exception {
                Stack<Object> stack = new Stack<Object>();
                HashMap<String, Object> environment = new HashMap<String, Object>();
                environment.putAll(globalScope.attributes); //TODO: Make sure this isn't busted
                LinkedList<Object> control = new LinkedList<Object>();
                Stack<Dump> dump = new Stack<Dump>();

                //Convert to reverse polish
                control.add(functionCall.initFunction);
                for(Object object : functionCall.arguments) {
                        control.add(object);
                        control.add(new ApplyObj());
                }
                printSECD("Initial control: ", control);

                Object controlItem = null;

                do {
                        while(!control.isEmpty()) {
                                controlItem = control.pop();


                                if(controlItem instanceof ApplyObj) {
                                        //Begin application
                                        printSECD();
                                        printSECD("Applying...");

                                        //Pop two items from the top of the stack
                                        Object value = stack.pop();

                                        Object potentialFunction = stack.pop();

                                        FL_Function lambda = null;
                                        if(potentialFunction instanceof FL_Function) {
                                                lambda = (FL_Function) potentialFunction;
                                        } else if(potentialFunction instanceof FL_Function_Call) {
                                                FL_Function_Call lambdaCall = (FL_Function_Call) potentialFunction;
                                                lambda = (FL_Function) lambdaCall.initFunction;
                                        }


                                        //Bind it properly in the current environment
                                        environment.put(lambda.parameter, value);
                                        Object result = lambda.expression;

                                        printSECD("Added complete. Result: ", result);

                                        //If the result is an abstraction, dump it
                                        if(result instanceof FL_Function) {
                                            //Dump
                                                printSECD("Beginning dump...");
                                                Dump newDump = new Dump((Stack<Object>) stack.clone(), (LinkedList<Object>) control.clone(), (HashMap<String, Object>) environment.clone());
                                                dump.push(newDump);

                                                stack.clear();
                                                control.clear();
                                                environment.clear();

                                                control.add(result);
                                        } else {
                                                //Push result on the stack
                                                stack.push(result);
                                        }
                                } else {
                                        //If it's a FL_Var, evaluate it
                                        if(controlItem instanceof Evaluatable && !(controlItem instanceof FL_Function)) {
                                                //TODO: Check here - this might not be properly evaluating the inputs	
                                                controlItem = evaluate(globalScope, controlItem);
                                        }
                                        //Otherwise, don't. Push the control item on the stack
                                        stack.push(controlItem);
                                }
                        }

                        if(!dump.isEmpty()) {
                                printSECD("Restoring from dump");
                                Dump restoredDump = dump.pop();

                                while(!stack.isEmpty()) {
                                        restoredDump.stack.push(stack.pop());
                                }

                                stack = restoredDump.stack;
                                control = restoredDump.control;
                                environment.putAll(restoredDump.environment);
                                printSECD("Dump restored");
                        }

                } while(!control.isEmpty() || !dump.isEmpty());

                FL_Set newEnv = new FL_Set();
                newEnv.attributes.putAll(environment);
                return evaluate(newEnv, stack.pop());
        }

        /**
	 * Main evaluation method. Evaluates an expression given a
	 * "scope", which is an FL_Set. An FL_Set is used as opposed
	 * to a regular HashMap (for example) because an FL_Set contains
	 * information about the current purity of the scope. This is
	 * thus used to check for purity in evaluation which cannot be
	 * determined during the parse phase.
	 */
        public static Object evaluate(FL_Set scope /*TODO: Why is this a FL_Set not a hashmap?*/, Object expression) throws Exception {
                scope = scope.clone();
//		System.out.println(scope);
                if(expression instanceof Evaluatable) {
                        printEVAL("Evaluating ", expression);
                        //System.out.println(expression.getClass().getName());
//	  	  	System.out.println(expression);

                        if(expression instanceof FL_Builtin) {
                                FL_Builtin builtin = (FL_Builtin) expression;
                                Object builtinParam = evaluate(scope, builtin.param);
                                switch(builtin.type) {
                                        case IMPORT:
                                                File file = new File((String) builtinParam);
                                                return new ForteLang(new FileInputStream(file)).input();
                                        case PRINT:
                                                System.out.println((String) builtinParam);
                                                return builtinParam;
                                        case EXEC:
                                                break;
                                        case HEAD:
                                                if(!(builtinParam instanceof FL_List)) {
                                                        throw new EvaluationException("head function requires a list as a parameter");
                                                } else {
                                                        FL_List list = ((FL_List) builtinParam);
                                                        if(list.isEmpty()) {
                                                                throw new EvaluationException("List is empty, cannot retrieve the head of the list");
                                                        }
                                                        return list.getFirst();
                                                }
                                        case TAIL:
                                                if(!(builtinParam instanceof FL_List)) {
                                                        throw new Exception("tail function requires a list as a parameter");
                                                } else {
                                                        FL_List list = ((FL_List) builtinParam);
                                                        if(list.isEmpty()) {
                                                                throw new EvaluationException("List is empty, cannot retrieve the tail of the list");
                                                        }
                                                        return list.subList(1, list.size());
//						  	list = (LinkedList) list.clone();
//						  	list.remove();
//						  	FL_List newList = new FL_List();
//						  	newList.list = list;
//						  	return newList;
                                                }
                                        case INPUT:
                                                if(!(builtinParam instanceof String)) {
                                                        throw new EvaluationException("Expected a string for input");
                                                }
                                                System.out.println("[@input] " + builtinParam);
                                                System.out.print("@input> ");
                                                return getGlobalScanner().nextLine();
                                        case INPUTBOX:
                                                if(!(builtinParam instanceof String)) {
                                                        throw new EvaluationException("Expected a string for inputbox");
                                                }
                                                UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                                                String inputBox = JOptionPane.showInputDialog(null, builtinParam, "ForteLang @inputbox", -1);
                                                return (inputBox == null ? "" : inputBox);
//						TODO: 
//					
//					    ### Things to do
//					    all = list -> false; 
//					    filter = list -> [];
//					    foldl = op -> init -> list -> 2;
//					    length = list -> 0;
//					    map = list;
//					    ###
                                }

                        } else

                        if(expression instanceof FL_Function) {
                                FL_Function function = (FL_Function) expression;
                                FL_Function_Call newFunctionCall = new FL_Function_Call();
                                newFunctionCall.initFunction = function;

                                return newFunctionCall;
                        } else
                        if(expression instanceof FL_Function_Call) {
                                printEVAL();
                                FL_Function_Call call = (FL_Function_Call) expression;

                                if(!(call.initFunction instanceof FL_Function)) {
                                        // It's a function name, which needs to be resolved
                                        FL_Var functionName = (FL_Var) call.initFunction;
                                        Object function = scope.attributes.get(functionName.getName());

                                        if(function == null) {
                                                throw new Exception("Function \u005c"" + functionName.getName() + "\u005c" has not been declared!");
                                        } else {
                                                if(function instanceof FL_Function_Call) {
                                                        call.initFunction = ((FL_Function_Call) function).initFunction;
                                                } else {
                                                        printEVAL("Reading from closure... ", function.getClass().getName());
                                                }
                                        }
                                }

                                if(call.arguments.isEmpty()) {
//				  	System.out.println("Evaluating because arguments are empty...");
                                        return evaluate(scope, call.initFunction);
                                }



                                if(call.initFunction instanceof FL_Function) {
                                        printEVAL("About to evaluate the following: ");
                                        printEVAL(call.initFunction);

                                        printEVAL();
                                        printEVAL("Starting SECD machine");
                                        printEVAL();

                                        return secd(call, scope);

//					System.out.println("With parameters " + call.arguments);
//					while(function instanceof FL_Function) {
//					  	FL_Function func = (FL_Function) function;
//						scope.attributes.put(func.parameter, call.arguments.pop());
//						function = func.expression;
//					}
//					System.out.println("Applied parameters");
//					System.out.println(function);
//					return evaluate(scope, function);
                                } else {
                                        printEVAL("Avoiding the SECD machine, because of type ", call.initFunction.getClass().getName());
                                        if(call.initFunction instanceof Evaluatable) {
                                                return evaluate(scope, call.initFunction);
                                        } else {
                                                return call.initFunction;
                                        }
                                }

                        } else if(expression instanceof FL_Guards) {
                                FL_Guards guards = (FL_Guards) expression;
                                for(Object guardExpr : guards.statements.keySet()) {
                                        Object result = evaluate(scope, guardExpr);
                                        if(result instanceof Boolean) {
                                                boolean resultBool = (boolean) result;
                                                if(!resultBool) {
                                                        continue;
                                                } else {
                                                        return evaluate(scope, guards.statements.get(guardExpr));
                                                }
                                        } else {
                                                throw new Exception(result + " is not a valid Boolean object in guard expression!");
                                        }
                                }
                                return evaluate(scope, guards.finalStatement);
                        } else if(expression instanceof FL_Match) {
                                FL_Match match = (FL_Match) expression;

                                Object matchOn = evaluate(scope, match.getMatchOn());

                                for(Object matchExpr : match.getStatements().keySet()) {
                                        Object result = evaluate(scope, matchExpr);

                                        if(result instanceof Pattern && matchOn instanceof String) {
                                                Pattern pattern = (Pattern) result;
                                                if(pattern.matcher((String) matchOn).matches()) {
                                                        return evaluate(scope, match.getStatements().get(matchExpr));
                                                }
                                        } else if(matchOn.equals(result)) {
                                                return evaluate(scope, match.getStatements().get(matchExpr));
                                        }
                                }
                                return evaluate(scope, match.getFinalStatement());
                        } else if(expression instanceof FL_Var) {
                                FL_Var flVar = (FL_Var) expression;
                                Object var = scope.attributes.get(flVar.getName());
                                while(var instanceof FL_Var) {
                                        var = scope.attributes.get(((FL_Var) var).getName());
                                }
                                if(var == null) {
                                        throw new Exception("Could not find function \u005c"" + flVar.getName() + "\u005c" in the program!");
                                }
                                if(var instanceof FL_Function) {
                                        printEVAL("\u005c"" + flVar.getName() + "\u005c" evaluates to a lambda, therefore not resolving");
                                        return var;
                                } else {
                                        printEVAL("Resolving: " + flVar.getName() + " => ", var);
                                        return evaluate(scope, var);
                                }
                        } else if(expression instanceof FL_OpExpr) {
                                FL_OpExpr flVarOp = (FL_OpExpr) expression;

                                printEVAL("\u005cn\u005cnAbout to evaluate OpExpr:");
                                printEVAL(flVarOp);

                                Object left = flVarOp.getLeftExpr();
                                Object right = flVarOp.getRightExpr();

                                if (left instanceof Evaluatable) {
                                        printEVAL("EvalOpExpr left part", left);
                                        left = evaluate(scope, left);
                                }

                                if (right instanceof Evaluatable) {
                                        printEVAL("EvalOpExpr right part", right);
                                        right = evaluate(scope, right);
                                }

                                Token operatorToUse = flVarOp.getOperator();

                                printEVAL("OpExpr to eval: " + left + " " + operatorToUse.image + " " + right);

                                Object newInit = new OperatorParser(operatorToUse).apply(left, right);

                                printEVAL("OpExpr eval result: ", newInit);
                                return newInit;

//			  	if(flVarOp.expressionsToParse.isEmpty()) {
//					return evaluate(scope, newInit);
//			  	} else {
//					FL_OpExpr newOp = new FL_OpExpr();
//					newOp.initVar = newInit;
//					newOp.operators = flVarOp.operators;
//					newOp.expressionsToParse = flVarOp.expressionsToParse;
//					return evaluate(scope, newOp);
//			  	}
                        } else if(expression instanceof FL_List) {
                                FL_List list = (FL_List) expression;
                                ListIterator<Object> iterator = list.listIterator(0);
                                while(iterator.hasNext()) {
                                        Object expr = iterator.next();
                                        iterator.set(evaluate(scope, expr));
                                }
                                return list;
                        } else if(expression instanceof FL_Set) {
                                // TODO: Handle purity tests here!
                                return expression;
                        } else if(expression instanceof FL_IncludedSet) {
                                FL_IncludedSet incSet = (FL_IncludedSet) expression;
                                scope.attributes.putAll(incSet.set.attributes);
                                return evaluate(scope, incSet.expression);
                        }
                        throw new Exception("Not implemented yet, could not evaluate: " + expression);
                } else {
//	  	  if(expression instanceof Double) {
//			double d = (double) expression;
//			if((d % 1) == 0) {
//				return (long) d;
//			}
//	  	  }	
                  return expression;
                }
        }

/** Main endpoint */
  final public Object input() throws ParseException, Exception {
                                    Object expression;
    expression = enclosedExpression();
    jj_consume_token(0);
        if(LOGGING_ENABLE) {
                System.out.println();
                System.out.println("=== Parsing complete ===");
                System.out.println();
        }

    Object result = null;
    if(expression instanceof FL_IncludedSet) {
        FL_IncludedSet flIS = (FL_IncludedSet) expression;
        result = evaluate(flIS.set, flIS.expression);
    } else {
                result = evaluate(new FL_Set(), expression);
    }

    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Token anyOperator() throws ParseException, Exception {
                                         Token op;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN_OP:
      op = jj_consume_token(BOOLEAN_OP);
                                 {if (true) return op;}
      break;
    case OP:
      op = jj_consume_token(OP);
                                 {if (true) return op;}
      break;
    case SET_OP:
      op = jj_consume_token(SET_OP);
                                 {if (true) return op;}
      break;
    case COMPARATOR_OP:
      op = jj_consume_token(COMPARATOR_OP);
                                 {if (true) return op;}
      break;
    case CONCAT:
      op = jj_consume_token(CONCAT);
                                 {if (true) return op;}
      break;
    case CONTAINS:
      op = jj_consume_token(CONTAINS);
                                 {if (true) return op;}
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FL_IncludedSet includedSet() throws ParseException, Exception {
                                                  FL_IncludedSet result; Object expression; FL_Set set;
          result = new FL_IncludedSet();
    jj_consume_token(INCLUDE);
    set = set();
    jj_consume_token(IN);
    expression = enclosedExpression();
          result.set = set;
          result.expression = expression;
          {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public FL_Set set() throws ParseException, Exception {
                                  FL_Set set; Token setDeclaration; Token attrName; Object attrValue;
          set = new FL_Set();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IMPURE:
      jj_consume_token(IMPURE);
            set.impure = true;
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    setDeclaration = jj_consume_token(OPENCBRACKET);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAR_NAME:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_1;
      }
      attrName = jj_consume_token(VAR_NAME);
      jj_consume_token(EQUALS);
      attrValue = enclosedExpression();
      jj_consume_token(SEMICOLON);
            set.attributes.put(attrName.image, attrValue);
    }
    jj_consume_token(CLOSECBRACKET);
          set.checkPurity(setDeclaration);
          {if (true) return set;}
    throw new Error("Missing return statement in function");
  }

  final public FL_Function lambda() throws ParseException, Exception {
                                          FL_Function.FL_Function_Builder function; Token paramName; Object innerExpression;
          function = new FL_Function.FL_Function_Builder();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR_NAME:
      paramName = jj_consume_token(VAR_NAME);
      jj_consume_token(FUNCTION_ARROW);
      innerExpression = enclosedExpression();
      break;
    case OPENBRACKET:
      jj_consume_token(OPENBRACKET);
      paramName = jj_consume_token(VAR_NAME);
      jj_consume_token(FUNCTION_ARROW);
      innerExpression = enclosedExpression();
      jj_consume_token(CLOSEBRACKET);
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
            function.parameters.push(paramName.image);
            function.expression = innerExpression;
            {if (true) return function.build();}
    throw new Error("Missing return statement in function");
  }

  final public FL_List list() throws ParseException, Exception {
                                    FL_List list; Object nextItem;
          list = new FL_List();
    jj_consume_token(OPENSBRACKET);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CLOSESBRACKET:
      jj_consume_token(CLOSESBRACKET);
                                  {if (true) return list;}
      break;
    case NUMBER:
    case FLOATING_POINT_NUMBER:
    case BOOLEAN:
    case STRING:
    case REGEX_STRING:
    case INCLUDE:
    case IMPURE:
    case MATCH:
    case IMPORT:
    case EXEC:
    case PRINT:
    case INPUT:
    case INPUTBOX:
    case HEAD:
    case TAIL:
    case OPENBRACKET:
    case OPENSBRACKET:
    case OPENCBRACKET:
    case VAR_NAME:
    case GUARD_START:
      //Non-empty list
                      nextItem = enclosedExpression();
                  list.add(nextItem);
      label_2:
      while (true) {
        if (jj_2_1(2)) {
          ;
        } else {
          break label_2;
        }
        jj_consume_token(COMMA);
        nextItem = enclosedExpression();
                          list.add(nextItem);
      }
      jj_consume_token(CLOSESBRACKET);
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  final public double number() throws ParseException, Exception {
                                     Token value; double f;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER:
      value = jj_consume_token(NUMBER);
                                                            {if (true) return Double.valueOf(value.image);}
      break;
    case FLOATING_POINT_NUMBER:
      value = jj_consume_token(FLOATING_POINT_NUMBER);
                                            {if (true) return Double.valueOf(value.image);}
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/** Expressions */
  final public Object enclosedExpression() throws ParseException, Exception {
                                                 Object result; Token vName;
    if (jj_2_2(3)) {
      result = opExpression();
                                 {if (true) return result;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPENBRACKET:
        jj_consume_token(OPENBRACKET);
        result = opExpression();
        jj_consume_token(CLOSEBRACKET);
             {if (true) return result;}
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public Object expression() throws ParseException, Exception {
                                         Object result;
    if (jj_2_3(3)) {
      result = functionCall();
                                           {if (true) return result;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMBER:
      case FLOATING_POINT_NUMBER:
      case BOOLEAN:
      case STRING:
      case REGEX_STRING:
      case INCLUDE:
      case IMPURE:
      case MATCH:
      case IMPORT:
      case EXEC:
      case PRINT:
      case INPUT:
      case INPUTBOX:
      case HEAD:
      case TAIL:
      case OPENBRACKET:
      case OPENSBRACKET:
      case OPENCBRACKET:
      case VAR_NAME:
      case GUARD_START:
        result = singleExpression();
                                              {if (true) return result;}
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public Object singleExpression() throws ParseException, Exception {
                                               Object result; Token token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IMPURE:
    case OPENCBRACKET:
      result = set();
                           {if (true) return result;}
      break;
    case OPENBRACKET:
    case VAR_NAME:
      result = lambda();
                              {if (true) return result;}
      break;
    case INCLUDE:
      result = includedSet();
                                   {if (true) return result;}
      break;
    case OPENSBRACKET:
      result = list();
                            {if (true) return result;}
      break;
    case NUMBER:
    case FLOATING_POINT_NUMBER:
      result = number();
                              {if (true) return result;}
      break;
    case GUARD_START:
      result = guards();
                              {if (true) return result;}
      break;
    case MATCH:
      result = match();
                             {if (true) return result;}
      break;
    case STRING:
      token = jj_consume_token(STRING);
                             {if (true) return parseString(token);}
      break;
    case REGEX_STRING:
      token = jj_consume_token(REGEX_STRING);
                                   {if (true) return Pattern.compile(parseString(token));}
      break;
    case BOOLEAN:
      token = jj_consume_token(BOOLEAN);
                              {if (true) return Boolean.parseBoolean(token.image);}
      break;
    case IMPORT:
    case EXEC:
    case PRINT:
    case INPUT:
    case INPUTBOX:
    case HEAD:
    case TAIL:
      result = builtinFunctions();
                                        {if (true) return result;}
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Object opExpression() throws ParseException, Exception {
  Object leftExpr;
  Object rightExpr = null;
  Token operator = null;
    leftExpr = expression();
    if (jj_2_4(2)) {
      operator = anyOperator();
      rightExpr = enclosedExpression();
    } else {
      ;
    }
                if(operator != null) {
                        //TODO: Check for nested OpExprs here and
                        //handle the order of operations.
                        {if (true) return new FL_OpExpr(leftExpr, rightExpr, operator);}
                } else {
                        {if (true) return leftExpr;}
                }
    throw new Error("Missing return statement in function");
  }

  final public FL_Function_Call functionCall() throws ParseException, Exception {
                                                     FL_Function_Call result; Object param; Token varName; Object lambda;
                varName = null;
                lambda = null;
    if (jj_2_5(2)) {
      lambda = lambda();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAR_NAME:
        varName = jj_consume_token(VAR_NAME);
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                result = new FL_Function_Call();
                if(varName != null) {
                        result.initFunction = new FL_Var(varName.image);
                } else {
                        result.initFunction = lambda;
                }
    label_3:
    while (true) {
      if (jj_2_6(2)) {
        ;
      } else {
        break label_3;
      }
      param = enclosedExpression();
            result.arguments.add(param);
    }
          {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Object builtinFunctions() throws ParseException, Exception {
                                               Object param; Token stringToken;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IMPORT:
      jj_consume_token(IMPORT);
      param = enclosedExpression();
                                                 {if (true) return new FL_Builtin(FL_Builtin.Builtin.IMPORT, param);}
      break;
    case PRINT:
      jj_consume_token(PRINT);
      param = enclosedExpression();
                                             {if (true) return new FL_Builtin(FL_Builtin.Builtin.PRINT, param);}
      break;
    case EXEC:
      jj_consume_token(EXEC);
      param = enclosedExpression();
                                                 {if (true) return new FL_Builtin(FL_Builtin.Builtin.EXEC, param);}
      break;
    case HEAD:
      jj_consume_token(HEAD);
      param = enclosedExpression();
                                                 {if (true) return new FL_Builtin(FL_Builtin.Builtin.HEAD, param);}
      break;
    case TAIL:
      jj_consume_token(TAIL);
      param = enclosedExpression();
                                                 {if (true) return new FL_Builtin(FL_Builtin.Builtin.TAIL, param);}
      break;
    case INPUT:
      jj_consume_token(INPUT);
      param = enclosedExpression();
                                                  {if (true) return new FL_Builtin(FL_Builtin.Builtin.INPUT, param);}
      break;
    case INPUTBOX:
      jj_consume_token(INPUTBOX);
      param = enclosedExpression();
                                                     {if (true) return new FL_Builtin(FL_Builtin.Builtin.INPUTBOX, param);}
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FL_Guards guards() throws ParseException, Exception {
                                        FL_Guards guards; Object predicate; Object expression; Object finalExpression;
          guards = new FL_Guards(); expression = null;
    jj_consume_token(GUARD_START);
    label_4:
    while (true) {
      jj_consume_token(GUARD);
      predicate = enclosedExpression();
      jj_consume_token(GUARD_ARROW);
      expression = enclosedExpression();
                  guards.statements.put(predicate, expression);
      if (jj_2_7(2)) {
        ;
      } else {
        break label_4;
      }
    }
    jj_consume_token(GUARD);
    jj_consume_token(GUARD_ARROW);
    finalExpression = enclosedExpression();
          guards.finalStatement = finalExpression;
          {if (true) return guards;}
    throw new Error("Missing return statement in function");
  }

  final public FL_Match match() throws ParseException, Exception {
  FL_Match match;
  Object statement;

  Object predicate;
  Object expression;
  Object finalExpression;
          expression = null;
    jj_consume_token(MATCH);
    statement = enclosedExpression();
          match = new FL_Match(statement);
    label_5:
    while (true) {
      jj_consume_token(GUARD);
      predicate = enclosedExpression();
      jj_consume_token(GUARD_ARROW);
      expression = enclosedExpression();
                  match.addStatement(predicate, expression);
      if (jj_2_8(2)) {
        ;
      } else {
        break label_5;
      }
    }
    jj_consume_token(GUARD);
    jj_consume_token(GUARD_ARROW);
    expression = enclosedExpression();
          match.setFinalStatement(expression);
          {if (true) return match;}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_3_5() {
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_scan_token(OPENBRACKET)) return true;
    if (jj_scan_token(VAR_NAME)) return true;
    if (jj_scan_token(FUNCTION_ARROW)) return true;
    return false;
  }

  private boolean jj_3R_8() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_scan_token(36)) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_6()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_scan_token(VAR_NAME)) return true;
    if (jj_scan_token(FUNCTION_ARROW)) return true;
    if (jj_3R_6()) return true;
    return false;
  }

  private boolean jj_3R_10() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) return true;
    }
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_9()) return true;
    if (jj_3R_6()) return true;
    return false;
  }

  private boolean jj_3R_7() {
    if (jj_3R_12()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_scan_token(GUARD)) return true;
    if (jj_3R_6()) return true;
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_scan_token(VAR_NAME)) return true;
    if (jj_scan_token(EQUALS)) return true;
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_scan_token(REGEX_STRING)) return true;
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_scan_token(IMPURE)) return true;
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_scan_token(MATCH)) return true;
    if (jj_3R_6()) return true;
    Token xsp;
    if (jj_3_8()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_8()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_34() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_41()) jj_scanpos = xsp;
    if (jj_scan_token(OPENCBRACKET)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_42()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(CLOSECBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3R_22() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_12() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) return true;
    }
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_8()) return true;
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_scan_token(INCLUDE)) return true;
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_scan_token(GUARD)) return true;
    if (jj_3R_6()) return true;
    return false;
  }

  private boolean jj_3R_11() {
    if (jj_scan_token(OPENBRACKET)) return true;
    if (jj_3R_7()) return true;
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_scan_token(CONTAINS)) return true;
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_scan_token(CONCAT)) return true;
    return false;
  }

  private boolean jj_3R_16() {
    if (jj_scan_token(COMPARATOR_OP)) return true;
    return false;
  }

  private boolean jj_3R_15() {
    if (jj_scan_token(SET_OP)) return true;
    return false;
  }

  private boolean jj_3R_14() {
    if (jj_scan_token(OP)) return true;
    return false;
  }

  private boolean jj_3R_6() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3R_11()) return true;
    }
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_7()) return true;
    return false;
  }

  private boolean jj_3R_13() {
    if (jj_scan_token(BOOLEAN_OP)) return true;
    return false;
  }

  private boolean jj_3R_9() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_13()) {
    jj_scanpos = xsp;
    if (jj_3R_14()) {
    jj_scanpos = xsp;
    if (jj_3R_15()) {
    jj_scanpos = xsp;
    if (jj_3R_16()) {
    jj_scanpos = xsp;
    if (jj_3R_17()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_46() {
    if (jj_scan_token(FLOATING_POINT_NUMBER)) return true;
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  private boolean jj_3R_37() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) return true;
    }
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_scan_token(GUARD_START)) return true;
    Token xsp;
    if (jj_3_7()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_7()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_6()) return true;
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_scan_token(INPUTBOX)) return true;
    if (jj_3R_6()) return true;
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_scan_token(INPUT)) return true;
    if (jj_3R_6()) return true;
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_scan_token(TAIL)) return true;
    if (jj_3R_6()) return true;
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_scan_token(HEAD)) return true;
    if (jj_3R_6()) return true;
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_3R_6()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_1()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(CLOSESBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_scan_token(EXEC)) return true;
    if (jj_3R_6()) return true;
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_scan_token(CLOSESBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_47() {
    if (jj_scan_token(IMPORT)) return true;
    if (jj_3R_6()) return true;
    return false;
  }

  private boolean jj_3R_40() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_48() {
    if (jj_scan_token(PRINT)) return true;
    if (jj_3R_6()) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_6()) return true;
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_scan_token(OPENSBRACKET)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) return true;
    }
    return false;
  }

  /** Generated Token Manager. */
  public ForteLangTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[11];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xbe,0x8000,0x0,0x1000000,0xdffbf00,0x300,0x1000000,0x5ffbf00,0x5ffbf00,0x0,0xfe0000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x10,0x10,0x54,0x0,0x0,0x54,0x54,0x10,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[8];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public ForteLang(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ForteLang(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ForteLangTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public ForteLang(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ForteLangTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public ForteLang(ForteLangTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ForteLangTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[46];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 11; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 46; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 8; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}

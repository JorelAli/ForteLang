/* Generated By:JavaCC: Do not edit this line. ForteLang.java */
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

public class ForteLang implements ForteLangConstants {

         /**
	 * A class that represents a function in the grammar
	 */
        private static class LangFunction {
                String functionName;
                Expression inputParam;

                /**
		 * @param functionName The name of the function
		 * @param result The parameter which is passed to the function
		 */
                public LangFunction(String functionName, Expression result) {
                        this.functionName = functionName;
                        this.inputParam = result;
                }
        }

        /**
	 * Enumeration that represents the type of a token. This can be an operator
	 * (+ or *), a number, parameter name or function. This enumeration also
	 * represents compound expressions, for example a list of expressions
	 * (2 + 3)
	 */
        private static enum ExpressionType {
                /** An operator (+) or (*) */
                OPERATOR,

                /** An integer */
                NUMBER,

                /** A parameter name */
                PARAMETER,

                /** A function declaration */
                FUNCTION,

                /** A list of expressions */
                COMPOUND,

                /** A left bracket ( */
                LEFTBRACKET,

                /** A right bracket ) */
                RIGHTBRACKET;
        }

        /**
	 * A class representing a computable expression statement. Examples of
	 * expressions are:
	 *
	 * 3
	 * 3 + 4
	 * 2 * (3 + 4)
	 * 2 * ( ADDFOUR(4) )
	 */
        private static class Expression {
                ExpressionType type;

                LangFunction langFunction;
                List<Expression> listOfExpressions;
                int number;
                String operator;

                private Expression(ExpressionType type) {
                        this.type = type;
                }

                /**
		 * @param value The expression's value (A function)
		 * @param type The type of expression that this object represents 
		 */
                public Expression(LangFunction value, ExpressionType type) {
                        this(type);
                        this.langFunction = value;
                }

                /**
		 * @param value The expression's value (A list of expressions)
		 * @param type The type of expression that this object represents 
		 */
                public Expression(List<Expression> value, ExpressionType type) {
                        this(type);
                        this.listOfExpressions = value;
                }

                /**
		 * @param value The expression's value (an Integer)
		 * @param type The type of expression that this object represents 
		 */
                public Expression(int value, ExpressionType type) {
                        this(type);
                        this.number = value;
                }

                /**
		 * @param value The expression's value (a String)
		 * @param type The type of expression that this object represents 
		 */
                public Expression(String value, ExpressionType type) {
                        this(type);
                        this.operator = value;
                }
        }

        /**
	 * An enumeration that represents mathematical operators and their
	 * precedence over other operators. Operators with a higher precedence value
	 * takes precedence over operators with a lower precedence value.
	 *
	 * It also consists of the application of the operator, i.e. what happens
	 * when you apply the operator to two numbers. For example, the + operator
	 * will add two numbers that are given to it.
	 *
	 * This makes the code maintainable by allowing new operators to be added
	 * easily, along with their precedence over other operators as well as the
	 * actions that occur when the operator is used. For example, to add a
	 * subtract operator:
	 *
	 *   SUBTRACT("-", 1, new ToIntBiFunction<Integer, Integer>() {
	 *	  	public int applyAsInt(Integer int1, Integer int2) {
	 *			return int1 - int2;
	 *	  	} 
	 *	 }),
	 *
	 * and then add it as a valid token in the JavaCC token declaration:
	 *
	 *   TOKEN : { < OPERATION : "+" | "*" | "-" > }
	 */
        private enum Operator {
                /* This is equivalent to Java 8's lambda expression:
	  	 *
	  	 *   PLUS("+", 1, (int1, int2) -> { int2 + int2 }),
	  	 * 	 TIMES("*", 2, (int1, int2) -> { int2 * int2 }),
	   	 */
                PLUS("+", 1, new ToIntBiFunction<Integer, Integer>() {
                        public int applyAsInt(Integer int1, Integer int2) {
                                return int1 + int2;
                        }
                }),
                TIMES("*", 2, new ToIntBiFunction<Integer, Integer>() {
                        public int applyAsInt(Integer int1, Integer int2) {
                                return int1 * int2;
                        }
                });

                String character;
                int precedence;
                ToIntBiFunction<Integer, Integer> application;

                Operator(String character, int precedence, ToIntBiFunction<Integer, Integer> application) {
                        this.character = character;
                        this.precedence = precedence;
                        this.application = application;
                }

                /**
		 * Converts an object by character to its respective operator
		 * @param character The character to convert to an operator
		 */
                public static Operator toOperator(String character) {
                        for(Operator operator : Operator.values()) {
                                if(operator.character.equals(character)) {
                                        return operator;
                                }
                        }
                        return null;
                }
        }

        /** String token for the MAIN function */
        private static final String MAIN_FUNCTION = "MAIN";

        /** The current function being parsed by the parser */
        private static String currentFunction;

        /** A List<String> of all declared function names */
        private static List<String> definedFunctions = new ArrayList<String>();

        /** A List<Token> of all function calls within function declarations */
        private static List<Token> functionCalls = new ArrayList<Token>();

        /**
	 * A Map<String, Set> consisting of function names mapping to a set of
	 * function calls. For example:
	 *
	 *   DEF MAIN { 1+ADDFOUR(2+ADDFOUR(3)) } ;
	 *
	 * produces the mapping MAIN -> [ADDFOUR]
	 */
        private static Map<String, Set<String>> functionMapping = new HashMap<String, Set<String>>();

        private static final String LEFT_BRACKET = "(";
        private static final String RIGHT_BRACKET = ")";

        /**
	 * A Map<String, Expression> which maps function names to expressions that
	 * represent the operations and statements of that function
	 */
        private static Map<String, Expression> functionBodies = new HashMap<String, Expression>();

        public static void main(String[] args) throws ParseException {
                try {
                        /* Run the parser */
                        new ForteLang(System.in).input();
                        System.out.println("PASS");
                } catch(Exception e) {
                        e.printStackTrace();
//		  	/* Catch ParseExceptions (unexpected tokens) */
//			if(e instanceof ParseException) {
//				ParseException ex = (ParseException) e;
//				fail(getErrorMessage(getExpectedTokens(ex), ex.currentToken));
//			} else {
//			  	/* Catch Exceptions which are thrown by the program which
//			  	 * indicate more specific exceptions */
//				fail(e.getMessage());
//			}
//			return;
                }
//		catch(TokenMgrError error) {
//		  	/* Catch lexical errors (invalid characters) */
//			fail(parseLexicalError(error));
//			return;
//		}


//		/* Check whether the function diverges or not. If it does not diverge,
//		 * interpret the program and print the result. */
//		System.out.println("PASS");
//		System.out.println(doesProgramDiverge() 
//			? "DIVERGENCE"
//			: interpretProgram()
//		);
        }

        /**
	 * Prints a helpful error message from an array of expected tokens
	 *
	 * @param expectedTokens A list of expected string tokens that the parser
	 *   expects
	 * @return An error message string that explains what the error is in more
	 *   detail
	 */
        private static String getErrorMessage(List<String> expectedTokens, Token currentToken) {
                if(expectedTokens.contains("<NUMBER>") && expectedTokens.contains("") && expectedTokens.contains("")) {
                        return "Expected a number, function name or parameter " + printLoc(currentToken) + " in the " + currentFunction + " function";
                }
                if(expectedTokens.contains("\u005c"}\u005c"")) {
                        return "Expected a closing bracket } " + printLoc(currentToken);
                }
                if(expectedTokens.contains("\u005c" \u005c"")) {
                        return "Expected a space " + printLoc(currentToken);
                }
                if(expectedTokens.contains("\u005c"DEF\u005c"")) {
                        return "Expected DEF keyword " + printLoc(currentToken);
                }
                if(expectedTokens.contains("")) {
                        return "Expected a valid function name consisting of only uppercase letters " + printLoc(currentToken);
                }
                if(expectedTokens.contains("\u005c"{\u005c"") && expectedTokens.contains("")) {
                        return "Expected a valid parameter name consisting of only lowercase letters " + printLoc(currentToken);
                }

                return "Expected " + expectedTokens.toString().substring(1, expectedTokens.toString().length() - 1) + " " + printLoc(currentToken);
        }

        /**
	 * Prints an error message to System.err and causes the program to FAIL
	 * @param errorMsg The error message to print to System.err
	 */
        private static void fail(String errorMsg) {
                System.err.println("FAIL");
                System.err.println(errorMsg);
        }

        /**
	 * Applies the parameters to a function. Because all function Expression
	 * objects are a LangFunction and each LangFunction contains the input
	 * parameter passed to that function, each function already "knows" what
	 * parameter needs to be applied to it.
	 *
	 * This converts each function body (i.e. the list of statements that the
	 * function will execute) into a compound Expression. It then iterates
	 * over the expression contents of the compound expression.
	 *
	 * If it finds a parameter, a substitution is applied to the parameter and
	 * replaces it with the given input parameter (as a compound Expression)
	 *
	 * If it finds a function, The function's parameters are applied to it (by
	 * calling applyParameters on that inner function call)
	 *
	 * @param resultFunction The function to apply parameters to
	 * @return The function contents as a compound Expression
	 */
        private static Expression applyParameters(Expression resultFunction) {

                /* Get the contents of the function to apply parameters to */
                LangFunction function = resultFunction.langFunction;
        Expression functionBody = functionBodies.get(function.functionName);

                /* Convert non-compound function bodies into compound Expressions */
                if(functionBody.type != ExpressionType.COMPOUND) {
                        List<Expression> compound = new ArrayList<Expression>();
                        compound.add(functionBody);
                        functionBody = new Expression(compound, ExpressionType.COMPOUND);
                }

        /* Create a list of the function body */
        List<Expression> funcDeclaration = functionBody.listOfExpressions;
        ListIterator<Expression> iterator = funcDeclaration.listIterator();

        while (iterator.hasNext()) {
                Expression currentObj = iterator.next();
                switch(currentObj.type) {
                                case PARAMETER:
                                        /* If a parameter is found, evaluate the parameter that is
					 * passed to the function. If it is a compound expression,
					 * expand the compound expression. Because expanding a
					 * compound expression automatically calls applyParameters
					 * to inner functions, this function just returns the result
					 * of the expanded compound. Otherwise, if no compound
					 * expression was found, set the value of the parameter as
					 * the value of the input parameter */
                                if(function.inputParam.type == ExpressionType.COMPOUND) {
                                                return expandCompound(function.inputParam);
                                } else {
                                                iterator.set(function.inputParam);
                                        }
                                        break;
                                case FUNCTION:
                                        /* If a function is found, set the inner function's
					 * parameter to the current parameter which is being applied
					 * in this function. Then, apply the parameters for the
					 * inner function and set that result as the result of this
					 * function's function call */
                                        LangFunction innerFunc = currentObj.langFunction;
                                        innerFunc.inputParam = function.inputParam;

                                        iterator.set(applyParameters(new Expression(innerFunc, ExpressionType.FUNCTION)));
                                        break;
                                default:
                                        break;
                }
            }
            return new Expression(funcDeclaration, ExpressionType.COMPOUND);
        }

        /**
	 * Expands a compound Expression into a compound expression with no function
	 * calls or parameters. This effectively produces a compound expression
	 * consisting of operators and numbers only.
	 *
	 * This loops through each expression and if it finds a function, it then
	 * applies the parameters of that function.
	 *
	 * @param compound The compound expression to expand
	 * @return A compound Expression object with no inner function calls.
	 */
        private static Expression expandCompound(Expression compound) {
        List<Expression> compoundContents = compound.listOfExpressions;
        ListIterator<Expression> it = compoundContents.listIterator();
        /* Loop through the elements of the compound expression */
        while (it.hasNext()) {
                Expression next = it.next();
                switch(next.type) {
                                case FUNCTION:
                                        /* If a function is found, apply the parameters */
                                        it.set(applyParameters(next));
                                        break;
                                default:
                                        break;
                }
        }
        return new Expression(compoundContents, ExpressionType.COMPOUND);
        }

        /**
	 * Takes a compound expression and "flattens" it as a monadic action. This
	 * function also inserts bracket symbols to aid in the order of mathematical
	 * operations for calculating a mathematical expression.
	 *
	 * For example, converts the compound expression [2, *, [3, +, 4]]
	 * into a list of tokens as an infix mathematical expression:
	 * [(, 2, *, (, 3, *, 4, ), )]
	 *
	 * @param compound The compound expression to flatten
	 * @param accumulator The current computed result
	 * @return A list of numbers, operators and brackets in infix notation that
	 *   represents the given compound expression
	 */
        private static List<Expression> flattenExpression(Expression compound, List<Expression> accumulator) {
                for(Expression expression : compound.listOfExpressions) {
                        if(expression.type == ExpressionType.COMPOUND) {
                                accumulator.add(new Expression(LEFT_BRACKET, ExpressionType.LEFTBRACKET));
                                accumulator.addAll(flattenExpression(expression, new ArrayList<Expression>()));
                                accumulator.add(new Expression(RIGHT_BRACKET, ExpressionType.RIGHTBRACKET));
                        } else {
                                accumulator.add(expression);
                        }
                }
                return accumulator;
        }

        /**
	 * Interprets the program. This method is broken up into 3 parts:
	 * [1] Simplifying the input program
	 * [2] Converting the infix program to Reverse Polish Notation
	 * [3] Interpreting the Reverse Polish Notation representation of the program
	 *
	 * [1] Simplifying the input program
	 *   expandCompound is used to simplify the nested compound expressions made
	 *   from the MAIN function. It produces an expression which consists of no
	 *   functions, therefore it only contains compound expressions of only
	 *   operators and numbers.
	 *
	 *   flattenExpression is then used to convert the nested compound
	 *   expressions into a list of operators and numbers.
	 *
	 * [2] The Shunting-Yard Algorithm is used to convert from infix notation to
	 *   Reverse Polish Notation
	 *
	 * @return The integer result of the program
	 */
        private static int interpretProgram() {

                /* Simplifies the program */
                Expression newExpression = expandCompound(functionBodies.get(MAIN_FUNCTION));
                List<Expression> program = flattenExpression(newExpression, new ArrayList<Expression>());

                /* Applies the Shunting-Yard Algorithm to the program to convert it from
		 * infix notation (e.g. 2 + 3) to Reverse Polish Notation (e.g. 2 3 +)
		 * See https://en.wikipedia.org/wiki/Shunting-yard_algorithm */
                LinkedList<String> queue = new LinkedList<String>();
                Stack<String> operatorStack = new Stack<String>();

                for(Expression expression : program) {
                        switch(expression.type) {
                                case NUMBER:
                                        /* If it's a number, add it to the output queue */
                                        queue.add(String.valueOf(expression.number));
                                        break;
                                case OPERATOR:
                                        /* If it's an operator, check the precedence of it with
					 * other operators. If it doesn't have precedence over
					 * other operators in the stack, add those to the output
					 * queue. Then, add the operator to the operator stack */
                                        while(!operatorStack.empty() && !hasPrecedence(expression, operatorStack.peek())) {
                                                queue.add(operatorStack.pop());
                                        }
                                        operatorStack.push(expression.operator);
                                        break;
                                case LEFTBRACKET:
                                        /* If it's a left bracket, add it to the operator stack*/
                                        operatorStack.push(LEFT_BRACKET);
                                        break;
                                case RIGHTBRACKET:
                                        /* If it's a right bracket put stuff from the operator
					 * stack to the output queue until a left bracket is
					 * found. Then, remove the left bracket from the operator
					 * stack. */
                                        while(!operatorStack.peek().equals(LEFT_BRACKET)) {
                                                queue.add(operatorStack.pop());
                                        }
                                        operatorStack.pop();
                                        break;
                        }
                }

                /* Add all remaining operators from the operator stack to the output queue */
                queue.addAll(operatorStack);

                /* Interprets the Reverse Polish Notation program */
                Stack<Integer> accumulator = new Stack<Integer>();
                while(queue.size() != 0) {
                        String element = queue.remove();

                        if(Operator.toOperator(element) == null) {
                                /* If the thing in the queue is not an operator (i.e. a number),
			  	 * add it to the top of the stack */
                                accumulator.push(Integer.parseInt(element));
                        } else {
                                /* If the thing in the queue is an operator, apply the operator's
			  	 * function, as declared in the Operator enumeration */
                                accumulator.push(Operator.toOperator(element).application.applyAsInt(accumulator.pop(), accumulator.pop()));
                        }
                }

                return accumulator.pop();
        }

        /**
	 * Checks if an operator has precedence over another operator. This uses
	 * the Operator enum's precedence value to check whether an operator has
	 * precedence over another. If the given operator to check precedence over
	 * is a left bracket, returns true (all operations have precendence over
	 * the left bracket)
	 *
	 * @param expression The operator to check precedence over
	 * @param topOfStack The operator that is being checked for precedence over
	 * @return True if (expression) has precedence over (topOfStack)
	 */
        private static boolean hasPrecedence(Expression operator1, String operator2) {
                if(operator2.equals(LEFT_BRACKET)) {
                        return true;
                } else {
                        return Operator.toOperator(operator1.operator).precedence > Operator.toOperator(operator2).precedence;
                }
        }

        /**
	 * This gets the list of expected tokens from a ParseException. When a
	 * ParseException takes place, it produces a list of possible tokens that
	 * it expects. This function turns the encoded list from the ParseException
	 * into a list of strings of the tokens that it expects.
	 *
	 * @param exception The ParseException to retrieve expected tokens from
	 * @return A List of strings of expected tokens
	 */
        private static List<String> getExpectedTokens(ParseException exception) {
                /* "Flattens" a multidimensional integer array using a monadic action.
	  	 * This converts a nested array for example [2, [3]] into a single array
	  	 * [2, 3]. This uses /i's Stream framework's flatMapToInt function.
	  	 *
	  	 * This is equivalent to the Java 8 code:
	  	 *
	  	 *   Arrays.stream(e.expectedTokenSequences)
	  	 *     .flatMapToInt(Arrays::stream)
	  	 *     .toArray(); 
	  	 */
                int[] flattenedArr = Arrays.stream(exception.expectedTokenSequences).flatMapToInt(new Function<int[], IntStream>() {
                        public IntStream apply(int[] array) { return Arrays.stream(array); }
                }).toArray();

                /* Use the flattened array with the contents of the parse exception to
		 * get the token names that the parse exception expects */
                String[] expectedTokens = new String[flattenedArr.length];
                for(int i = 0; i < flattenedArr.length; i++) {
                        expectedTokens[i] = exception.tokenImage[flattenedArr[i]];
                }

                return Arrays.asList(expectedTokens);
        }

        /**
	 * Parses the result of a TokenMgrError to convert its result to a more
	 * human-readable format stating which token was found, what function it was
	 * found inside and where in the program it was discovered.
	 *
	 * @param error The TokenMgrError to convert to human-readable format
	 * @return A human-readable string which describes the TokenMgrError
	 */
        private static String parseLexicalError(TokenMgrError error) {
                String msg = error.getMessage();
                String errLine = msg.split(",")[0].substring(22);
                String errCol = msg.split("column ")[1].split("\u005c\u005c.")[0];
                String found = msg.split("Encountered: \u005c"")[1].substring(0, 1);

                return "Invalid character " + found +
                        " was found in the " + currentFunction +
                        " function on line " + errLine +
                        ", column " + errCol;
        }

        /**
	 * Prints the location of where an error occurred, given a specific token
	 * @param token The token to print the location of
	 * @return A human-readable String indicating the location of the token
     */
        private static String printLoc(Token token) {
                return "on line " + token.beginLine + ", column " + token.beginColumn;
        }

        /**
	 * Creates a generic exception with the given message
	 *
	 * @param message The message that the exception will produce
	 * @return A new Exception 
	 */
        private static Exception mkException(String message) {
                return new Exception(message);
        }

/**
 * This parses the input from System.in
 * This accepts the program, which is 1 or more functions (denoted by the +
 * symbol), and the end of file character
 */
  static final public void input() throws ParseException, Exception {
    expression();
    eof();
  }

/**
 * Parses the end of file character. When this is run by the parser, two checks
 * take place:
 *
 * [1] Checks that the MAIN function has been declared
 * [2] Checks that functions that were called in other function declarations
 *     have been declared
 */
  static final public void eof() throws ParseException, Exception {
    jj_consume_token(0);

  }

  static final public void anyOperator() throws ParseException, Exception {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN_OP:
      jj_consume_token(BOOLEAN_OP);
      break;
    case OP:
      jj_consume_token(OP);
      break;
    case SET_OP:
      jj_consume_token(SET_OP);
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void includedSet() throws ParseException, Exception {
    jj_consume_token(INCLUDE);
    set();
    jj_consume_token(IN);
    expression();
  }

  static final public void set() throws ParseException, Exception {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IMPURE:
      jj_consume_token(IMPURE);
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    jj_consume_token(OPENCBRACKET);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAR_NAME:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_1;
      }
      jj_consume_token(VAR_NAME);
      jj_consume_token(EQUALS);
      functionResult();
    }
    jj_consume_token(CLOSECBRACKET);
  }

  static final public void functionResult() throws ParseException, Exception {
    if (jj_2_1(2)) {
      lambda();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMBER:
      case FLOATING_POINT_NUMBER:
      case BOOLEAN:
      case STRING:
      case INCLUDE:
      case IMPURE:
      case IMPORT:
      case EXEC:
      case OPENCBRACKET:
      case OPENSBRACKET:
      case VAR_NAME:
        expression();
        break;
      case GUARD:
        guards();
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(SEMICOLON);
  }

  static final public void lambda() throws ParseException, Exception {
    label_2:
    while (true) {
      jj_consume_token(VAR_NAME);
      jj_consume_token(FUNCTION_ARROW);
      if (jj_2_2(3)) {
        ;
      } else {
        break label_2;
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER:
    case FLOATING_POINT_NUMBER:
    case BOOLEAN:
    case STRING:
    case INCLUDE:
    case IMPURE:
    case IMPORT:
    case EXEC:
    case OPENCBRACKET:
    case OPENSBRACKET:
    case VAR_NAME:
      expression();
      break;
    case GUARD:
      guards();
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void list() throws ParseException, Exception {
    jj_consume_token(OPENSBRACKET);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CLOSESBRACKET:
      jj_consume_token(CLOSESBRACKET);
      break;
    case NUMBER:
    case FLOATING_POINT_NUMBER:
    case BOOLEAN:
    case STRING:
    case IMPURE:
    case OPENBRACKET:
    case OPENCBRACKET:
    case OPENSBRACKET:
    case VAR_NAME:
      enclosedExpression();
      label_3:
      while (true) {
        if (jj_2_3(2)) {
          ;
        } else {
          break label_3;
        }
        jj_consume_token(COMMA);
        enclosedExpression();
      }
      jj_consume_token(CLOSESBRACKET);
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void enclosedExpression() throws ParseException, Exception {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPENBRACKET:
      jj_consume_token(OPENBRACKET);
      expression();
      jj_consume_token(CLOSEBRACKET);
      break;
    case NUMBER:
    case FLOATING_POINT_NUMBER:
    case BOOLEAN:
    case STRING:
    case IMPURE:
    case OPENCBRACKET:
    case OPENSBRACKET:
    case VAR_NAME:
      singleExpression();
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void number() throws ParseException, Exception {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER:
      jj_consume_token(NUMBER);
      break;
    case FLOATING_POINT_NUMBER:
      jj_consume_token(FLOATING_POINT_NUMBER);
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void expression() throws ParseException, Exception {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR_NAME:
      jj_consume_token(VAR_NAME);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMBER:
      case FLOATING_POINT_NUMBER:
      case BOOLEAN:
      case STRING:
      case IMPURE:
      case OPENBRACKET:
      case OPENCBRACKET:
      case OPENSBRACKET:
      case VAR_NAME:
        label_4:
        while (true) {
          if (jj_2_4(3)) {
            singleExpression();
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case NUMBER:
            case FLOATING_POINT_NUMBER:
            case BOOLEAN:
            case STRING:
            case IMPURE:
            case OPENBRACKET:
            case OPENCBRACKET:
            case OPENSBRACKET:
            case VAR_NAME:
              enclosedExpression();
              break;
            default:
              jj_la1[8] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case NUMBER:
          case FLOATING_POINT_NUMBER:
          case BOOLEAN:
          case STRING:
          case IMPURE:
          case OPENBRACKET:
          case OPENCBRACKET:
          case OPENSBRACKET:
          case VAR_NAME:
            ;
            break;
          default:
            jj_la1[9] = jj_gen;
            break label_4;
          }
        }
        break;
      case SELECT:
        label_5:
        while (true) {
          jj_consume_token(SELECT);
          jj_consume_token(VAR_NAME);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SELECT:
            ;
            break;
          default:
            jj_la1[10] = jj_gen;
            break label_5;
          }
        }
        break;
      default:
        jj_la1[11] = jj_gen;
        if (jj_2_5(2)) {
          anyOperator();
          jj_consume_token(VAR_NAME);
        } else {
          ;
        }
      }
      break;
    case IMPURE:
    case OPENCBRACKET:
      set();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SELECT:
        label_6:
        while (true) {
          jj_consume_token(SELECT);
          jj_consume_token(VAR_NAME);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SELECT:
            ;
            break;
          default:
            jj_la1[12] = jj_gen;
            break label_6;
          }
        }
        break;
      default:
        jj_la1[13] = jj_gen;
        if (jj_2_6(2)) {
          jj_consume_token(SET_OP);
          set();
        } else {
          ;
        }
      }
      break;
    case INCLUDE:
      includedSet();
      if (jj_2_7(2)) {
        jj_consume_token(SET_OP);
        includedSet();
      } else {
        ;
      }
      break;
    case OPENSBRACKET:
      list();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONCAT:
        jj_consume_token(CONCAT);
        expression();
        break;
      default:
        jj_la1[14] = jj_gen;
        ;
      }
      break;
    case NUMBER:
    case FLOATING_POINT_NUMBER:
      number();
      if (jj_2_8(2)) {
        jj_consume_token(OP);
        number();
      } else {
        ;
      }
      break;
    case STRING:
      jj_consume_token(STRING);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONTAINS:
        jj_consume_token(CONTAINS);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IMPURE:
        case OPENCBRACKET:
          set();
          break;
        case VAR_NAME:
          jj_consume_token(VAR_NAME);
          break;
        default:
          jj_la1[15] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[17] = jj_gen;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CONCAT:
          jj_consume_token(CONCAT);
          jj_consume_token(STRING);
          break;
        default:
          jj_la1[16] = jj_gen;
          ;
        }
      }
      break;
    case BOOLEAN:
      jj_consume_token(BOOLEAN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN_OP:
        jj_consume_token(BOOLEAN_OP);
        jj_consume_token(BOOLEAN);
        break;
      default:
        jj_la1[18] = jj_gen;
        ;
      }
      break;
    case IMPORT:
    case EXEC:
      builtinFunctions();
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void builtinFunctions() throws ParseException, Exception {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IMPORT:
      jj_consume_token(IMPORT);
      break;
    case EXEC:
      jj_consume_token(EXEC);
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(STRING);
  }

  static final public void singleExpression() throws ParseException, Exception {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IMPURE:
    case OPENCBRACKET:
      set();
      break;
    case VAR_NAME:
      jj_consume_token(VAR_NAME);
      break;
    case OPENSBRACKET:
      list();
      break;
    case NUMBER:
    case FLOATING_POINT_NUMBER:
      number();
      break;
    case STRING:
      jj_consume_token(STRING);
      break;
    case BOOLEAN:
      jj_consume_token(BOOLEAN);
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void guards() throws ParseException, Exception {
    label_7:
    while (true) {
      jj_consume_token(GUARD);
      expression();
      jj_consume_token(GUARD_ARROW);
      expression();
      jj_consume_token(GUARD);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GUARD:
        ;
        break;
      default:
        jj_la1[22] = jj_gen;
        break label_7;
      }
    }
    jj_consume_token(GUARD_ARROW);
    expression();
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_3_7() {
    if (jj_scan_token(SET_OP)) return true;
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3R_10() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_17()) {
    jj_scanpos = xsp;
    if (jj_scan_token(25)) {
    jj_scanpos = xsp;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_scan_token(10)) {
    jj_scanpos = xsp;
    if (jj_scan_token(9)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_17() {
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3_8() {
    if (jj_scan_token(OP)) return true;
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_3R_32() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(14)) {
    jj_scanpos = xsp;
    if (jj_scan_token(15)) return true;
    }
    return false;
  }

  static private boolean jj_3R_31() {
    if (jj_3R_32()) return true;
    return false;
  }

  static private boolean jj_3R_30() {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_3R_11()) return true;
    if (jj_scan_token(VAR_NAME)) return true;
    return false;
  }

  static private boolean jj_3R_29() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  static private boolean jj_3R_28() {
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_scan_token(SET_OP)) return true;
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3R_27() {
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_26() {
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3R_25() {
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3R_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_scan_token(VAR_NAME)) return true;
    return false;
  }

  static private boolean jj_3R_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(7)) {
    jj_scanpos = xsp;
    if (jj_scan_token(8)) return true;
    }
    return false;
  }

  static private boolean jj_3R_15() {
    if (jj_scan_token(OPENBRACKET)) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3R_9() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_15()) {
    jj_scanpos = xsp;
    if (jj_3R_16()) return true;
    }
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_3R_9()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_3()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(CLOSESBRACKET)) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_scan_token(OPENSBRACKET)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(21)) {
    jj_scanpos = xsp;
    if (jj_3R_22()) return true;
    }
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_scan_token(VAR_NAME)) return true;
    if (jj_scan_token(FUNCTION_ARROW)) return true;
    return false;
  }

  static private boolean jj_3R_8() {
    Token xsp;
    if (jj_3_2()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_2()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_8()) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_scan_token(VAR_NAME)) return true;
    if (jj_scan_token(EQUALS)) return true;
    return false;
  }

  static private boolean jj_3R_12() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(13)) jj_scanpos = xsp;
    if (jj_scan_token(OPENCBRACKET)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_21()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(CLOSECBRACKET)) return true;
    return false;
  }

  static private boolean jj_3R_13() {
    if (jj_scan_token(INCLUDE)) return true;
    return false;
  }

  static private boolean jj_3R_11() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(1)) {
    jj_scanpos = xsp;
    if (jj_scan_token(3)) {
    jj_scanpos = xsp;
    if (jj_scan_token(2)) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_19() {
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ForteLangTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[23];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xe,0x2000,0x2000000,0xa14ef80,0xa14ef80,0x2352780,0x2152780,0x180,0x2152780,0x2152780,0x20,0x21527a0,0x20,0x20,0x10,0x2042000,0x10,0x40,0x2,0x214ef80,0xc000,0x2142780,0x8000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[8];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public ForteLang(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ForteLang(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ForteLangTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public ForteLang(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ForteLangTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public ForteLang(ForteLangTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ForteLangTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[34];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 23; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 34; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 8; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}

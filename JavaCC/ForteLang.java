/* Generated By:JavaCC: Do not edit this line. ForteLang.java */
import java.util.*;
import java.util.function.*;
import java.util.stream.*;
import java.lang.reflect.Field;
import java.io.*;

public class ForteLang implements ForteLangConstants {

        static interface Evaluatable { }

        /** Class declarations */

        //Function declaration, e.g. x -> y -> x + y
        static class FL_Function implements Evaluatable {
                String parameter;
                Object expression;

                @Override public String toString() { return "FL_Function(" + parameter + ") -> (" + expression + ")"; }

                /*
		Don't forget currying!
		x -> y -> true is actually equal to x -> (y -> true)
		*/

                static class FL_Function_Builder {
                        Stack<String> parameters;
                        Object expression;

                        public FL_Function_Builder() {
                                parameters = new Stack<String>();
                        }

                        public FL_Function build() {
                                Object currentExpression = expression;
                                while(!parameters.empty()) {
                                        FL_Function newExpression = new FL_Function();
                                        newExpression.parameter = parameters.pop();
                                        newExpression.expression = currentExpression;
                                        currentExpression = newExpression;
                                }
                                return (FL_Function) currentExpression;
                        }
                }
        }

        //Function call, e.g. myFunc 2 3
        static class FL_Function_Call implements Evaluatable {
                FL_Var functionName;
                LinkedList<Object> arguments;

                public FL_Function_Call() {
                        arguments = new LinkedList<Object>();
                }

                @Override public String toString() { return "FL_Function_Call(" + functionName + ") " + arguments; }
        }

        static class FL_Set implements Evaluatable {
                boolean impure;
                LinkedHashMap<String, Object> attributes;

                public FL_Set() { attributes = new LinkedHashMap<String, Object>(); }

                public FL_Set clone() {
                        FL_Set newSet = new FL_Set();
                        newSet.impure = impure;
                        newSet.attributes = new LinkedHashMap<String, Object>(attributes);
                        return newSet;
                }

                public void checkPurity(Token setDeclaration) throws Exception {
                  //TODO: Make this code WAY more elegant, like seriously... what even
                        if(!impure) {
                                for(String str: attributes.keySet()) {
                                        if(str.startsWith("@")) {
                                                throw new Exception("impure set detected and isn't declared as 'impure'");
                                        }
                                }

                                for(Object o : attributes.values()) {
                                        if(o instanceof FL_Set) {
                                                if(((FL_Set) o).impure) {
                                                        throw new Exception("Set detected as impure due to inner attribute and isn't declared as 'impure'" + location(setDeclaration));
                                                }
                                        }
                                }
                        } else {
                                for(String str: attributes.keySet()) {
                                        if(str.startsWith("@")) {
                                                return;
                                        }
                                }
                                for(Object o : attributes.values()) {
                                        if(o instanceof FL_Set) {
                                                if(((FL_Set) o).impure) {
                                                        return;
                                                }
                                        }
                                }
                                throw new Exception("impure keyword detected, but the set is actually pure" + location(setDeclaration));
                        }
                }

                public boolean isImpure() {
                        for(String str: attributes.keySet()) {
                                if(str.startsWith("@")) {
                                        return true;
                                }
                        }

                        for(Object o : attributes.values()) {
                                if(o instanceof FL_Set) {
                                        if(((FL_Set) o).impure) {
                                                return true;
                                        }
                                }
                        }
                        return false;
                }

                @Override public String toString() {
                  return "FL_Set[impure=" + impure + ", attrs=" + attributes + "]";
                }
        }

        /** Helper functions */

        static String location(Token token) {
                return " (Line " + token.beginLine + " in " + fileName + ")";
        }

        static String parseString(Token str) {
                return str.image.substring(1, str.image.length() - 1);
        }


        /** Other declared objects */

        static class FL_List implements Evaluatable {
                LinkedList<Object> list;
                public FL_List() { list = new LinkedList<Object>(); }

                @Override public String toString() {
                  return "FL_List" + list;
                }
        }

        static class FL_Guards implements Evaluatable {
                LinkedHashMap<Object, Object> statements;
                Object finalStatement;

                public FL_Guards() { statements = new LinkedHashMap<Object, Object>(); }

                @Override public String toString() {
                  return "FL_Guards[stmts=" + statements + ", finalStmt=" + finalStatement + "]";
                }
        }

        static class FL_Matches implements Evaluatable {
                LinkedHashMap<Object, Object> statements;
                Object finalStatement;

                public FL_Matches() { statements = new LinkedHashMap<Object, Object>(); }
        }

        static class FL_Enum implements Evaluatable {
                List<String> elements;

                public FL_Enum() { elements = new LinkedList<String>(); }
                @Override public String toString() { return "ENUM" + elements.toString(); }
        }

        static class FL_IncludedSet implements Evaluatable {
                FL_Set set;
                Object expression;

                @Override public String toString() {
                  return "FL_IncludedSet[set=" + set + ", expr=" + expression + "]";
                }
        }

        static class FL_Var implements Evaluatable {
                String name;

                public FL_Var(String name) {
                        this.name = name;
                }

                @Override public String toString() {
                  return "FL_Var[name=" + name + "]";
                }
        }

        static class FL_VarOp implements Evaluatable {
                Object initVar;
                LinkedList<Token> operators;
                LinkedList<Object> expressionsToParse;

                public FL_VarOp() {
                        operators = new LinkedList<Token>();
                        expressionsToParse = new LinkedList<Object>();
                }

                @Override public String toString() {
                  if(isSingle()) {
                        return "FL_VarOp[" + getSingle() + "]";
                  } else {
                        return "FL_VarOp[init=" + initVar + "" + operators + "" + expressionsToParse + "]";
                  }
                }

                //Whether there's only an initVar and no operators/expressionsToParse
                public boolean isSingle() {
                        return operators.isEmpty() && expressionsToParse.isEmpty();
                }

                public Object getSingle() {
                        return initVar;
                }
        }

        static class FL_Builtin implements Evaluatable {
                Object param;
                enum Builtin { IMPORT, PRINT, EXEC, HEAD, TAIL }

                Builtin type;

                public FL_Builtin(Builtin type, Object param) {
                        this.type = type;
                        this.param = param;
                }
        }

        /** Static fields */
        static String fileName;


        /** Main method */
        public static void main(String[] args) throws ParseException, FileNotFoundException {
                if(args.length != 1) {
                        System.out.println("Usage: java ForteLang <File>");
                        return;
                }

                File file = new File(args[0]);
                fileName = file.getName();
                try {
                        /* Run the parser */

                        Object result = new ForteLang(new FileInputStream(file)).input();
                        System.out.println("Final result: " + result);

                } catch(Exception e) {
                        e.printStackTrace();
                        return;
                }

                //Begin interpreting system
        }

        public static <T> T print(T o) throws Exception {
                StringBuilder builder = new StringBuilder();
                builder.append(o.getClass().getName() + "[");
                for(Field f : o.getClass().getDeclaredFields()) {
                        builder.append(f.getName() + ": " + f.get(o).toString() + "; ");
                }
                System.out.println(builder.append("]").toString());
                return o;
        }

        static class OperatorParser {

                enum Operator { BOOLEAN, NUMERICAL, SET, COMPARATOR };

                Operator operatorKind;
                String op;

                public OperatorParser(Token operator) {
                        switch(operator.kind) {
                                case ForteLangConstants.BOOLEAN_OP:
                                        operatorKind = Operator.BOOLEAN;
                                        break;
                                case ForteLangConstants.OP:
                                        operatorKind = Operator.NUMERICAL;
                                        break;
                                case ForteLangConstants.SET_OP:
                                        operatorKind = Operator.SET;
                                        break;
                                case ForteLangConstants.COMPARATOR_OP:
                                        operatorKind = Operator.COMPARATOR;
                                        break;
                                default:
                                        operatorKind = null;
                                        break;
                        }
                        op = operator.image;
                }

                public Object apply(Object o1, Object o2) throws Exception {
                        switch(operatorKind) {
                                case BOOLEAN:
                                        return applyBoolean((boolean) o1, (boolean) o2);
                                case NUMERICAL:
                                        return applyDouble((double) o1, (double) o2);
                                case SET:
                                        return applySetObjects((FL_Set) o1, (FL_Set) o2);
                                case COMPARATOR:
                                        return applyComparator(o1, o2);
                        }
                        throw new Exception ("Failed to apply any operators");
                }

                public boolean applyComparator(Object o1, Object o2) throws Exception {
                        switch(op) {
                                case ">":
                                        return (double) o1 > (double) o2;
                                case "<":
                                        return (double) o1 < (double) o2;
                                case "<=":
                                        return (double) o1 <= (double) o2;
                                case ">=":
                                        return (double) o1 >= (double) o2;
                                case "==":
                                        return o1.equals(o2);
                                case "!=":
                                        return !o1.equals(o2);
                        }
                        throw new Exception ("Invalid operator (expected comparator operator");
                }

                public double applyDouble(double f1, double f2) throws Exception {
                        if(operatorKind != Operator.NUMERICAL) {
                                throw new Exception("Invalid operator (expected numerical operator)");
                        }

                        //TODO: operator precedence
                        switch(op) {
                                case "+":
                                        return f1 + f2;
                                case "*":
                                        return f1 * f2;
                                case "-":
                                        return f1 - f2;
                                case "/":
                                        return f1 / f2;
                                case "%":
                                        return (int) f1 % (int) f2;
                        }
                        throw new Exception("Invalid operator " + op);
                }

                public boolean applyBoolean(boolean b1, boolean b2) throws Exception {
                        if(operatorKind != Operator.BOOLEAN) {
                                throw new Exception("Invalid operator (expected boolean operator)");
                        }
                        switch(op) {
                                case "||":
                                        return b1 || b2;
                                case "&&":
                                        return b1 && b2;
                        }
                        throw new Exception("Invalid operator " + op);
                }

                public FL_Set applySetObjects(FL_Set s1, FL_Set s2) throws Exception {
                        if(operatorKind != Operator.SET) {
                                throw new Exception("Invalid operator (expected set operator)");
                        }

                        FL_Set newSet = new FL_Set();
                        newSet.attributes = new LinkedHashMap<String, Object>(s1.attributes);

                        switch(op) {
                                //union
                                case "/+": {
                                        newSet.impure = (s1.impure || s2.impure);
                                        newSet.attributes.putAll(s2.attributes);
                                        break;
                                }
                                //intersect
                                case "/-": {
                                        newSet.attributes.putAll(s1.attributes);
                                        newSet.attributes.keySet().retainAll(s2.attributes.keySet());
                                        for(String key : newSet.attributes.keySet()) {
                                                newSet.attributes.put(key, s1.attributes.get(key));
                                        }
                                        newSet.impure = newSet.isImpure();
                                        break;
                                }
                                //difference
                                case "//": {
                                        for(String key : s2.attributes.keySet()) {
                                                newSet.attributes.remove(key);
                                        }
                                        newSet.impure = newSet.isImpure();
                                        break;
                                }
                        }
                        return newSet;
                }
        }

        public static Object evaluate(FL_Set scope, Object expression) throws Exception {
                scope = scope.clone();
                if(expression instanceof Evaluatable) {
                        if(expression instanceof FL_Builtin) {
                                FL_Builtin builtin = (FL_Builtin) expression;
                                Object builtinParam = evaluate(scope, builtin.param);
//				//TODO: Fix for when builtins require non-String types
//				if(!(builtinParam instanceof String)) {
//					throw new Exception("Builtin parameter " + builtinParam + " did not evaluate to a String");
//				}
//				String builtinParamStr = (String) builtinParam;
                                switch(builtin.type) {
                                        case IMPORT:
                                                File file = new File((String) builtinParam);
                                                return new ForteLang(new FileInputStream(file)).input();
                                        case PRINT:
                                                System.out.println((String) builtinParam);
                                                return builtinParam;
                                        case EXEC:
                                                break;
                                        case HEAD:
                                                if(!(builtinParam instanceof FL_List)) {
                                                        throw new Exception("head function requires a list as a parameter");
                                                } else {
                                                        return ((FL_List) builtinParam).list.getFirst();
                                                }
                                        case TAIL:
                                                if(!(builtinParam instanceof FL_List)) {
                                                        throw new Exception("tail function requires a list as a parameter");
                                                } else {
                                                        ((FL_List) builtinParam).list.remove();
                                                        return builtinParam;
                                                }
                                }

                        } else if(expression instanceof FL_Function_Call) {
                                FL_Function_Call call = (FL_Function_Call) expression;
                                Object function = scope.attributes.get(call.functionName.name);
                                if(function instanceof FL_Function) {
//					System.out.println("About to evaluate the following: ");
//					System.out.println(function);
//					System.out.println("With parameters " + call.arguments);
                                        while(function instanceof FL_Function) {
                                                FL_Function func = (FL_Function) function;
                                                scope.attributes.put(func.parameter, call.arguments.pop());
                                                function = func.expression;
                                        }
//					System.out.println("Applied parameters");
//					System.out.println(function);
                                        return evaluate(scope, function);
                                } else {
                                        throw new Exception("Tried to perform a function call on something that's not a function");
                                }

                        } else if(expression instanceof FL_Guards) {
                                FL_Guards guards = (FL_Guards) expression;
                                for(Object guardExpr : guards.statements.keySet()) {
                                        Object result = evaluate(scope, guardExpr);
                                        if(result instanceof Boolean) {
                                                boolean resultBool = (boolean) result;
                                                if(!resultBool) {
                                                        continue;
                                                } else {
                                                        return evaluate(scope, guards.statements.get(guardExpr));
                                                }
                                        } else {
                                                throw new Exception(result + " is not a valid Boolean object in guard expression!");
                                        }
                                }
                                return evaluate(scope, guards.finalStatement);
                        } else if(expression instanceof FL_Var) {
                                FL_Var flVar = (FL_Var) expression;
                                Object var = scope.attributes.get(flVar.name);
                                if(var == null) {
                                        throw new Exception("Could not find function \u005c"" + flVar.name + "\u005c" in the program!");
                                }
                                return evaluate(scope, var);
                        } else if(expression instanceof FL_VarOp) {
                                FL_VarOp flVarOp = (FL_VarOp) expression;
                                if(flVarOp.isSingle()) {
                                        return evaluate(scope, flVarOp.getSingle());
                                } else {
                                        Object init = flVarOp.initVar;
                                        Object next = flVarOp.expressionsToParse.pop();

                                        while (init instanceof Evaluatable) {
                                                init = evaluate(scope, init);
                                        }

                                        while (next instanceof Evaluatable) {
                                                next = evaluate(scope, next);
                                        }

                                        Object newInit = new OperatorParser(flVarOp.operators.pop()).apply(init, next);

                                        if(flVarOp.expressionsToParse.isEmpty()) {
                                                return evaluate(scope, newInit);
                                        } else {
                                                FL_VarOp newOp = new FL_VarOp();
                                                newOp.initVar = newInit;
                                                newOp.operators = flVarOp.operators;
                                                newOp.expressionsToParse = flVarOp.expressionsToParse;
                                                return evaluate(scope, newOp);
                                        }
                                }
                        } else if(expression instanceof FL_List) {
                                FL_List list = (FL_List) expression;
                                ListIterator<Object> iterator = list.list.listIterator(0);
                                while(iterator.hasNext()) {
                                        Object expr = iterator.next();
                                        iterator.set(evaluate(scope, expr));
                                }
                                return list;
                        } else if(expression instanceof FL_IncludedSet) {
                                FL_IncludedSet incSet = (FL_IncludedSet) expression;
                                scope.attributes.putAll(incSet.set.attributes);
                                return evaluate(scope, incSet.expression);
                        }
                        throw new Exception("Not implemented yet, could not evaluate: " + expression);
                } else {
//	  	  System.out.println("Primitive result: ");
                  return expression;
                }
        }

/** Main endpoint */
  final public Object input() throws ParseException, Exception {
                                    Object expression; Object result;
    expression = expression();
    jj_consume_token(0);
    if(expression instanceof FL_IncludedSet) {
        FL_IncludedSet flIS = (FL_IncludedSet) expression;
        {if (true) return evaluate(flIS.set, flIS.expression);}
    } else {
                {if (true) return evaluate(new FL_Set(), expression);}
    }
    throw new Error("Missing return statement in function");
  }

  final public Token anyOperator() throws ParseException, Exception {
                                         Token op;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN_OP:
      op = jj_consume_token(BOOLEAN_OP);
                                 {if (true) return op;}
      break;
    case OP:
      op = jj_consume_token(OP);
                                 {if (true) return op;}
      break;
    case SET_OP:
      op = jj_consume_token(SET_OP);
                                 {if (true) return op;}
      break;
    case COMPARATOR_OP:
      op = jj_consume_token(COMPARATOR_OP);
                                 {if (true) return op;}
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FL_IncludedSet includedSet() throws ParseException, Exception {
                                                  FL_IncludedSet result; Object expression; FL_Set set;
          result = new FL_IncludedSet();
    jj_consume_token(INCLUDE);
    set = set();
    jj_consume_token(IN);
    expression = expression();
          result.set = set;
          result.expression = expression;
          {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public FL_Set set() throws ParseException, Exception {
                                  FL_Set set; Token setDeclaration; Token attrName; Object attrValue;
          set = new FL_Set();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IMPURE:
      jj_consume_token(IMPURE);
            set.impure = true;
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    setDeclaration = jj_consume_token(OPENCBRACKET);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAR_NAME:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_1;
      }
      attrName = jj_consume_token(VAR_NAME);
      jj_consume_token(EQUALS);
      attrValue = functionResult();
            if(set.attributes.containsKey(attrName.image)) {
                        System.out.println("'" + attrName.image + "' already exists in the set... overriding");
            }
            set.attributes.put(attrName.image, attrValue);

            //Extra purity checks
            if(attrValue instanceof FL_Function) {
                        /*
				For example, this code is invalid:
				  print' = x -> @print "hello";
				Because it calls the impure function @print.
				This means that print' should be @print' to
				maintain impurities
			*/
            }
    }
    jj_consume_token(CLOSECBRACKET);
          set.checkPurity(setDeclaration);
          {if (true) return set;}//print(set); //TODO: Remove this

    throw new Error("Missing return statement in function");
  }

  final public FL_Enum enumeration() throws ParseException, Exception {
                                           FL_Enum flEnum; Token element;
      flEnum = new FL_Enum();
    jj_consume_token(ENUM_OPEN);
    element = jj_consume_token(CAPS);
          flEnum.elements.add(element.image);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      jj_consume_token(COMMA);
      element = jj_consume_token(CAPS);
            flEnum.elements.add(element.image);
    }
    jj_consume_token(ENUM_CLOSE);
          {if (true) return flEnum;}
    throw new Error("Missing return statement in function");
  }

  final public Object functionResult() throws ParseException, Exception {
                                             Object result;
    if (jj_2_1(2)) {
      result = lambda();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMBER:
      case FLOATING_POINT_NUMBER:
      case BOOLEAN:
      case STRING:
      case INCLUDE:
      case IMPURE:
      case IMPORT:
      case EXEC:
      case PRINT:
      case HEAD:
      case TAIL:
      case OPENSBRACKET:
      case OPENCBRACKET:
      case VAR_NAME:
      case GUARD:
        result = expression();
        break;
      case ENUM_OPEN:
        result = enumeration();
        break;
      case MATCH:
        result = matches();
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(SEMICOLON);
          {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public FL_Function lambda() throws ParseException, Exception {
                                          FL_Function.FL_Function_Builder function; Token paramName; Object innerExpression;
          function = new FL_Function.FL_Function_Builder();
    label_3:
    while (true) {
      paramName = jj_consume_token(VAR_NAME);
            function.parameters.push(paramName.image);
      jj_consume_token(FUNCTION_ARROW);
      if (jj_2_2(3)) {
        ;
      } else {
        break label_3;
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER:
    case FLOATING_POINT_NUMBER:
    case BOOLEAN:
    case STRING:
    case INCLUDE:
    case IMPURE:
    case IMPORT:
    case EXEC:
    case PRINT:
    case HEAD:
    case TAIL:
    case OPENSBRACKET:
    case OPENCBRACKET:
    case VAR_NAME:
    case GUARD:
      innerExpression = expression();
      break;
    case MATCH:
      innerExpression = matches();
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          function.expression = innerExpression;
          {if (true) return function.build();}
    throw new Error("Missing return statement in function");
  }

  final public FL_List list() throws ParseException, Exception {
                                    FL_List list; Object nextItem;
          list = new FL_List();
    jj_consume_token(OPENSBRACKET);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CLOSESBRACKET:
      jj_consume_token(CLOSESBRACKET);
                                  {if (true) return list;}
      break;
    case NUMBER:
    case FLOATING_POINT_NUMBER:
    case BOOLEAN:
    case STRING:
    case IMPURE:
    case OPENBRACKET:
    case OPENSBRACKET:
    case OPENCBRACKET:
    case VAR_NAME:
      //Non-empty list
                      nextItem = enclosedExpression();
                  list.list.add(nextItem);
      label_4:
      while (true) {
        if (jj_2_3(2)) {
          ;
        } else {
          break label_4;
        }
        jj_consume_token(COMMA);
        nextItem = enclosedExpression();
                          list.list.add(nextItem);
      }
      jj_consume_token(CLOSESBRACKET);
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  final public Object enclosedExpression() throws ParseException, Exception {
                                                 Object result;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPENBRACKET:
      jj_consume_token(OPENBRACKET);
      result = expression();
      jj_consume_token(CLOSEBRACKET);
             {if (true) return result;}
      break;
    case NUMBER:
    case FLOATING_POINT_NUMBER:
    case BOOLEAN:
    case STRING:
    case IMPURE:
    case OPENSBRACKET:
    case OPENCBRACKET:
    case VAR_NAME:
      result = singleExpression();
                                        {if (true) return result;}
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public double number() throws ParseException, Exception {
                                     Token value; double f;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER:
      value = jj_consume_token(NUMBER);
                                                            {if (true) return Double.valueOf(value.image);}
      break;
    case FLOATING_POINT_NUMBER:
      value = jj_consume_token(FLOATING_POINT_NUMBER);
                                            {if (true) return Double.valueOf(value.image);}
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/** Expressions */
  final public Object expression() throws ParseException, Exception {
                                         Object result;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR_NAME:
      result = variableExpression();
                                          {if (true) return result;}
      break;
    case IMPURE:
    case OPENCBRACKET:
      result = setExpression();
                                          {if (true) return result;}
      break;
    case INCLUDE:
      result = includedSet();
                                          {if (true) return result;}
      break;
    case OPENSBRACKET:
      result = listExpression();
                                          {if (true) return result;}
      break;
    case NUMBER:
    case FLOATING_POINT_NUMBER:
      result = numberExpression();
                                          {if (true) return result;}
      break;
    case STRING:
      result = stringExpression();
                                          {if (true) return result;}
      break;
    case BOOLEAN:
      result = booleanExpression();
                                          {if (true) return result;}
      break;
    case IMPORT:
    case EXEC:
    case PRINT:
    case HEAD:
    case TAIL:
      result = builtinFunctions();
                                          {if (true) return result;}
      break;
    case GUARD:
      result = guards();
                                          {if (true) return result;}
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Object variableExpression() throws ParseException, Exception {
                                                 Object result; Token varName;
    if (jj_2_4(2)) {
      result = lambda();
                                           {if (true) return result;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAR_NAME:
        varName = jj_consume_token(VAR_NAME);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUMBER:
        case FLOATING_POINT_NUMBER:
        case BOOLEAN:
        case STRING:
        case IMPURE:
        case OPENBRACKET:
        case OPENSBRACKET:
        case OPENCBRACKET:
        case VAR_NAME:
          result = functionCall(varName);
                                                 {if (true) return result;}
          break;
        case SELECT:
          jj_consume_token(SELECT);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case CAPS:
            jj_consume_token(CAPS);
                           {if (true) return null;}
            break;
          case VAR_NAME:
            jj_consume_token(VAR_NAME);
            label_5:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case SELECT:
                ;
                break;
              default:
                jj_la1[10] = jj_gen;
                break label_5;
              }
              jj_consume_token(SELECT);
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case VAR_NAME:
                jj_consume_token(VAR_NAME);
                break;
              case CAPS:
                jj_consume_token(CAPS);
                break;
              default:
                jj_la1[11] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
            }
                                                                 {if (true) return "enum selection";}
            break;
          default:
            jj_la1[12] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[13] = jj_gen;
          result = variableOperator(varName);
                                                       {if (true) return result;}
        }
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

// <VARNAME> <OP> <EXPRESSION> 
  final public FL_VarOp variableOperator(Token varName) throws ParseException, Exception {
                                                              Token operator; Object expr; FL_VarOp varop;
          varop = new FL_VarOp();
          varop.initVar = new FL_Var(varName.image);
    label_6:
    while (true) {
      if (jj_2_5(2)) {
        ;
      } else {
        break label_6;
      }
      operator = anyOperator();
            varop.operators.add(operator);
      if (jj_2_6(3)) {
        expr = expression();
                                            varop.expressionsToParse.add(expr);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUMBER:
        case FLOATING_POINT_NUMBER:
        case BOOLEAN:
        case STRING:
        case IMPURE:
        case OPENBRACKET:
        case OPENSBRACKET:
        case OPENCBRACKET:
        case VAR_NAME:
          expr = enclosedExpression();
                                            varop.expressionsToParse.add(expr);
          break;
        default:
          jj_la1[15] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
          {if (true) return varop;}
    throw new Error("Missing return statement in function");
  }

  final public FL_Function_Call functionCall(Token varName) throws ParseException, Exception {
                                                                  FL_Function_Call result; Object param;
                result = new FL_Function_Call();
                result.functionName = new FL_Var(varName.image);
    label_7:
    while (true) {
      if (jj_2_7(2)) {
        param = singleExpression();
                                           result.arguments.add(param);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUMBER:
        case FLOATING_POINT_NUMBER:
        case BOOLEAN:
        case STRING:
        case IMPURE:
        case OPENBRACKET:
        case OPENSBRACKET:
        case OPENCBRACKET:
        case VAR_NAME:
          param = enclosedExpression();
                                           result.arguments.add(param);
          break;
        default:
          jj_la1[16] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMBER:
      case FLOATING_POINT_NUMBER:
      case BOOLEAN:
      case STRING:
      case IMPURE:
      case OPENBRACKET:
      case OPENSBRACKET:
      case OPENCBRACKET:
      case VAR_NAME:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_7;
      }
    }
          {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Object stringExpression() throws ParseException, Exception {
                                               Token initString; Token nextToken; StringBuilder builder; FL_Set setExistance;
    initString = jj_consume_token(STRING);
          builder = new StringBuilder(parseString(initString));
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONTAINS:
      jj_consume_token(CONTAINS);
      setExistance = set();
                    {if (true) return setExistance.attributes.containsKey(parseString(initString));}
      break;
    default:
      jj_la1[18] = jj_gen;
      label_8:
      while (true) {
        if (jj_2_8(2)) {
          ;
        } else {
          break label_8;
        }
        jj_consume_token(CONCAT);
        nextToken = jj_consume_token(STRING);
                builder.append(parseString(nextToken));
      }
                 {if (true) return builder.toString();}
    }
    throw new Error("Missing return statement in function");
  }

  final public Object setExpression() throws ParseException, Exception {
  FL_Set initSet; Token setParam; Object accessed;
  FL_Set secondSet; Token setOp;
    initSet = set();
          accessed = initSet;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SELECT:
      label_9:
      while (true) {
        jj_consume_token(SELECT);
        setParam = jj_consume_token(VAR_NAME);
                if(accessed instanceof FL_Set) {
                                accessed = ((FL_Set) accessed).attributes.get(setParam.image);
                } else {
                                {if (true) throw new Exception ("Tried to access element " + setParam.image + " from something that's not a set" + location(setParam));}
                }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SELECT:
          ;
          break;
        default:
          jj_la1[19] = jj_gen;
          break label_9;
        }
      }
               {if (true) return accessed;}
      break;
    default:
      jj_la1[20] = jj_gen;
      label_10:
      while (true) {
        if (jj_2_9(2)) {
          ;
        } else {
          break label_10;
        }
        setOp = jj_consume_token(SET_OP);
        secondSet = set();
              initSet = new OperatorParser(setOp).applySetObjects(initSet, secondSet);
      }
               {if (true) return initSet;}
    }
    throw new Error("Missing return statement in function");
  }

  final public double numberExpression() throws ParseException, Exception {
                                               double acc; Token op; double next;
    acc = number();
    label_11:
    while (true) {
      if (jj_2_10(2)) {
        ;
      } else {
        break label_11;
      }
      op = jj_consume_token(OP);
      next = number();
                 acc = new OperatorParser(op).applyDouble(acc, next);
    }
          {if (true) return acc;}
    throw new Error("Missing return statement in function");
  }

  final public boolean booleanExpression() throws ParseException, Exception {
                                                 Token first; boolean acc; Token op; Token next;
    first = jj_consume_token(BOOLEAN);
          acc = Boolean.parseBoolean(first.image);
    label_12:
    while (true) {
      if (jj_2_11(2)) {
        ;
      } else {
        break label_12;
      }
      op = jj_consume_token(BOOLEAN_OP);
      next = jj_consume_token(BOOLEAN);
                 acc = new OperatorParser(op).applyBoolean(acc, Boolean.parseBoolean(next.image));
    }
          {if (true) return acc;}
    throw new Error("Missing return statement in function");
  }

  final public FL_List listExpression() throws ParseException, Exception {
                                              FL_List list; Object expr;
    list = list();
    label_13:
    while (true) {
      if (jj_2_12(2)) {
        ;
      } else {
        break label_13;
      }
      jj_consume_token(CONCAT);
      expr = expression();
        if(expr instanceof FL_List) {
                        list.list.addAll((List) expr);
        } else {

                        //This should be under that FL_VarOp, except it's not a VarOp...
                        //VarOps should just be named like "DoOpLater"

                        /*TODO: Say expr is an instanceof FL_Guards, which evaluates to a list.
			These need to be properly evaluated before concatenation is declared,
			so return type should be something like a "completeable future", which
			SHOULD return a list */

                //TODO: Handle list concat with new stuff
                        //throw new Exception("Tried to concat a list with unknown expression");
        }
    }
          {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  final public Object builtinFunctions() throws ParseException, Exception {
                                               Object param; Token stringToken;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IMPORT:
      jj_consume_token(IMPORT);
      if (jj_2_13(2)) {
        stringToken = jj_consume_token(STRING);
                                                         param = parseString(stringToken);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUMBER:
        case FLOATING_POINT_NUMBER:
        case BOOLEAN:
        case STRING:
        case IMPURE:
        case OPENBRACKET:
        case OPENSBRACKET:
        case OPENCBRACKET:
        case VAR_NAME:
          param = enclosedExpression();
          break;
        default:
          jj_la1[21] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
                                                                                                                               {if (true) return new FL_Builtin(FL_Builtin.Builtin.IMPORT, param);}
      break;
    case PRINT:
      jj_consume_token(PRINT);
      if (jj_2_14(2)) {
        stringToken = jj_consume_token(STRING);
                                                     param = parseString(stringToken);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUMBER:
        case FLOATING_POINT_NUMBER:
        case BOOLEAN:
        case STRING:
        case IMPURE:
        case OPENBRACKET:
        case OPENSBRACKET:
        case OPENCBRACKET:
        case VAR_NAME:
          param = enclosedExpression();
          break;
        default:
          jj_la1[22] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
                                                                                                                           {if (true) return new FL_Builtin(FL_Builtin.Builtin.PRINT, param);}
      break;
    case EXEC:
      jj_consume_token(EXEC);
      if (jj_2_15(2)) {
        stringToken = jj_consume_token(STRING);
                                                         param = parseString(stringToken);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUMBER:
        case FLOATING_POINT_NUMBER:
        case BOOLEAN:
        case STRING:
        case IMPURE:
        case OPENBRACKET:
        case OPENSBRACKET:
        case OPENCBRACKET:
        case VAR_NAME:
          param = enclosedExpression();
          break;
        default:
          jj_la1[23] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
                                                                                                                               {if (true) return new FL_Builtin(FL_Builtin.Builtin.EXEC, param);}
      break;
    case HEAD:
      jj_consume_token(HEAD);
      param = enclosedExpression();
                                                 {if (true) return new FL_Builtin(FL_Builtin.Builtin.HEAD, param);}
      break;
    case TAIL:
      jj_consume_token(TAIL);
      param = enclosedExpression();
                                                 {if (true) return new FL_Builtin(FL_Builtin.Builtin.TAIL, param);}
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Object singleExpression() throws ParseException, Exception {
                                               Object result; Token token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IMPURE:
    case OPENCBRACKET:
      result = set();
                           {if (true) return result;}
      break;
    case VAR_NAME:
      token = jj_consume_token(VAR_NAME);
                               {if (true) return new FL_Var(token.image);}
      break;
    case OPENSBRACKET:
      result = list();
                            {if (true) return result;}
      break;
    case NUMBER:
    case FLOATING_POINT_NUMBER:
      result = number();
                              {if (true) return result;}
      break;
    case STRING:
      token = jj_consume_token(STRING);
                             {if (true) return parseString(token);}
      break;
    case BOOLEAN:
      token = jj_consume_token(BOOLEAN);
                              {if (true) return Boolean.parseBoolean(token.image);}
      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FL_Matches matches() throws ParseException, Exception {
                                          FL_Matches matches;
          matches = new FL_Matches();
    jj_consume_token(MATCH);
    jj_consume_token(VAR_NAME);
    label_14:
    while (true) {
      jj_consume_token(GUARD);
      expression();
      jj_consume_token(GUARD_ARROW);
      expression();
      if (jj_2_16(2)) {
        ;
      } else {
        break label_14;
      }
    }
    if (jj_2_17(2)) {
      jj_consume_token(GUARD);
      jj_consume_token(GUARD_ARROW);
      expression();
    } else {
      ;
    }
          {if (true) return matches;}
    throw new Error("Missing return statement in function");
  }

  final public FL_Guards guards() throws ParseException, Exception {
                                        FL_Guards guards; Object predicate; Object expression; Object finalExpression; Token firstGuard;
          guards = new FL_Guards();
    label_15:
    while (true) {
      firstGuard = jj_consume_token(GUARD);
      predicate = expression();
      jj_consume_token(GUARD_ARROW);
      expression = expression();
      try {
        jj_consume_token(GUARD);
      } catch (ParseException e) {
                        System.err.println("Guards doesn't have a default case, for example:\u005cn  | ->> ...\u005cn" + location(firstGuard));
                        System.exit(0);
      }
                  guards.statements.put(predicate, expression);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GUARD:
        ;
        break;
      default:
        jj_la1[26] = jj_gen;
        break label_15;
      }
    }
    jj_consume_token(GUARD_ARROW);
    finalExpression = expression();
                  guards.finalStatement = finalExpression;
          {if (true) return guards;}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_3_17() {
    if (jj_scan_token(GUARD)) return true;
    if (jj_scan_token(GUARD_ARROW)) return true;
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3_16() {
    if (jj_scan_token(GUARD)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_85() {
    if (jj_scan_token(MATCH)) return true;
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_scan_token(OPENBRACKET)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) return true;
    }
    return false;
  }

  private boolean jj_3_15() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_3R_57()) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_scan_token(VAR_NAME)) return true;
    return false;
  }

  private boolean jj_3R_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_71() {
    if (jj_3R_17()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_3()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(CLOSESBRACKET)) return true;
    return false;
  }

  private boolean jj_3_14() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  private boolean jj_3R_67() {
    if (jj_scan_token(TAIL)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_scan_token(CLOSESBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_scan_token(HEAD)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_65() {
    if (jj_scan_token(EXEC)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) return true;
    }
    return false;
  }

  private boolean jj_3R_55() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_63() {
    if (jj_scan_token(IMPORT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) return true;
    }
    return false;
  }

  private boolean jj_3R_64() {
    if (jj_scan_token(PRINT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) return true;
    }
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_scan_token(OPENSBRACKET)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) return true;
    }
    return false;
  }

  private boolean jj_3R_80() {
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3R_79() {
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_scan_token(VAR_NAME)) return true;
    if (jj_scan_token(FUNCTION_ARROW)) return true;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_scan_token(CONCAT)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_16() {
    Token xsp;
    if (jj_3_2()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_2()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_79()) {
    jj_scanpos = xsp;
    if (jj_3R_80()) return true;
    }
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_3R_57()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_12()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_11() {
    if (jj_scan_token(BOOLEAN_OP)) return true;
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_54() {
    if (jj_scan_token(BOOLEAN)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_11()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_10() {
    if (jj_scan_token(OP)) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_3R_23()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_10()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_9() {
    if (jj_scan_token(SET_OP)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_60() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_9()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_75() {
    if (jj_scan_token(SELECT)) return true;
    return false;
  }

  private boolean jj_3R_59() {
    Token xsp;
    if (jj_3R_75()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_75()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_3R_22()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) return true;
    }
    return false;
  }

  private boolean jj_3_8() {
    if (jj_scan_token(CONCAT)) return true;
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  private boolean jj_3R_69() {
    if (jj_scan_token(VAR_NAME)) return true;
    if (jj_scan_token(EQUALS)) return true;
    return false;
  }

  private boolean jj_3R_62() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_8()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_scan_token(IMPURE)) return true;
    return false;
  }

  private boolean jj_3R_61() {
    if (jj_scan_token(CONTAINS)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_22() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_45()) jj_scanpos = xsp;
    if (jj_scan_token(OPENCBRACKET)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_69()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(CLOSECBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_scan_token(STRING)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) return true;
    }
    return false;
  }

  private boolean jj_3R_78() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_87() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_76() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_77() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_86() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) return true;
    }
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_scan_token(INCLUDE)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_scan_token(COMPARATOR_OP)) return true;
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_scan_token(SET_OP)) return true;
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_scan_token(OP)) return true;
    return false;
  }

  private boolean jj_3R_81() {
    Token xsp;
    if (jj_3R_86()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_86()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_scan_token(BOOLEAN_OP)) return true;
    return false;
  }

  private boolean jj_3R_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_18()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) return true;
    }
    return false;
  }

  private boolean jj_3R_83() {
    if (jj_scan_token(VAR_NAME)) return true;
    return false;
  }

  private boolean jj_3R_74() {
    if (jj_3R_84()) return true;
    return false;
  }

  private boolean jj_3R_82() {
    if (jj_scan_token(CAPS)) return true;
    return false;
  }

  private boolean jj_3R_84() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_5()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_73() {
    if (jj_scan_token(SELECT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_82()) {
    jj_scanpos = xsp;
    if (jj_3R_83()) return true;
    }
    return false;
  }

  private boolean jj_3R_72() {
    if (jj_3R_81()) return true;
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_scan_token(VAR_NAME)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_72()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) {
    jj_scanpos = xsp;
    if (jj_3R_74()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_48() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) return true;
    }
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_68() {
    if (jj_scan_token(GUARD)) return true;
    if (jj_3R_20()) return true;
    if (jj_scan_token(GUARD_ARROW)) return true;
    return false;
  }

  private boolean jj_3R_47() {
    if (jj_scan_token(FLOATING_POINT_NUMBER)) return true;
    return false;
  }

  private boolean jj_3R_56() {
    Token xsp;
    if (jj_3R_68()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_68()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) return true;
    }
    return false;
  }

  private boolean jj_3R_46() {
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public ForteLangTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[27];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1e,0x4000,0x0,0x2000000,0x889fdf00,0x809fdf00,0x81a04f00,0x80a04f00,0x300,0x809f5f00,0x40,0x4000000,0x4000000,0x80a04f40,0x0,0x80a04f00,0x80a04f00,0x80a04f00,0x80,0x40,0x40,0x80a04f00,0x80a04f00,0x80a04f00,0x1f0000,0x80804f00,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x2,0x0,0xa,0xa,0x2,0x2,0x0,0xa,0x0,0x2,0x2,0x2,0x2,0x2,0x2,0x2,0x0,0x0,0x0,0x2,0x2,0x2,0x0,0x2,0x8,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[17];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public ForteLang(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ForteLang(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ForteLangTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public ForteLang(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ForteLangTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public ForteLang(ForteLangTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ForteLangTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[42];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 27; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 42; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 17; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}

PARSER_BEGIN(ForteLang)

import java.util.*;
import java.util.function.*;
import java.util.stream.*;
import java.lang.reflect.Field;

public class ForteLang {

	/** Class declarations */
	static class FL_Function {
		List<String> parameters;
		Object expression;

		public FL_Function() { parameters = new LinkedList<String>(); }
	}

	static class FL_Set {
		boolean impure;
		LinkedHashMap<String, Object> attributes;

		public FL_Set() { attributes = new LinkedHashMap<String, Object>(); }

		public void checkPurity() throws Exception {
			if(!impure) {
				for(String str: attributes.keySet()) {
					if(str.startsWith("@")) {
						throw new Exception("impure set detected and isn't declared as 'impure'");
					}
				}
			}
		}
	}

	static class FL_Guards {
		LinkedHashMap<Object, Object> statements;
		Object finalStatement;

		public FL_Guards() { statements = new LinkedHashMap<Object, Object>(); }
	}

	static class FL_Matches {
		LinkedHashMap<Object, Object> statements;
		Object finalStatement;

		public FL_Matches() { statements = new LinkedHashMap<Object, Object>(); }
	}

	static class FL_Enum {
		List<String> elements;
		
		public FL_Enum() { elements = new LinkedList<String>(); } 
	}

	/** Main method */
	public static void main(String[] args) throws ParseException {
		try {
		  	/* Run the parser */
			new ForteLang(System.in).input();
			System.out.println("PASS");
		} catch(Exception e) {
		  	e.printStackTrace();
		  	return;
		}

		//Begin interpreting system
	}

	public static <T> T print(T o) throws Exception {
	  	StringBuilder builder = new StringBuilder();
	  	builder.append(o.getClass().getName() + "[");
		for(Field f : o.getClass().getDeclaredFields()) {
			builder.append(f.getName() + ": " + f.get(o).toString() + "; ");
		}
		System.out.println(builder.append("]").toString());
		return o;
	}
}

PARSER_END(ForteLang)

//Operators
TOKEN : { < BOOLEAN_OP : ">" | "<" | "<=" | ">=" | "==" | "!=" | "||" | "&&" > }
TOKEN : { < SET_OP : "/+" | "/-" | "//" > }
TOKEN : { < OP : "+" | "*" | "-" | "/" > }
TOKEN : { < CONCAT : "++" > }
TOKEN : { < SELECT : "." > }
TOKEN : { < CONTAINS : "?" > }

//Data types
TOKEN : { < NUMBER : ("-")? (["0"-"9"])+ > }
TOKEN : { < FLOATING_POINT_NUMBER : <NUMBER>"."<NUMBER> > }
TOKEN : { < BOOLEAN : "true" | "false" > } 
TOKEN : { < STRING : "\"" ("\\" ~[] | ~["\"", "\\"])* "\"" >}

//Keywords
TOKEN : { < INCLUDE : "include" > }
TOKEN : { < IN : "in" > }
TOKEN : { < IMPURE : "impure" > }
TOKEN : { < MATCH : "match" > }

//Built-in functions
TOKEN : { < IMPORT : "import" > }
TOKEN : { < EXEC : "@exec" > }
TOKEN : { < PRINT : "@print" > }

//Brackets
TOKEN : { < OPENBRACKET : "(" > }
TOKEN : { < CLOSEBRACKET : ")" > }

//Lists
TOKEN : { < OPENSBRACKET : "[" > }
TOKEN : { < CLOSESBRACKET : "]" > }
TOKEN : { < COMMA : "," > }

//Enums
TOKEN : { < CAPS : (["A"-"Z", "_"])+ > }
TOKEN : { < ENUM_OPEN : " {|" > }
TOKEN : { < ENUM_CLOSE : "|}" > }

//Sets
TOKEN : { < EQUALS : "=" > }
TOKEN : { < SEMICOLON : ";" > }
TOKEN : { < OPENCBRACKET : "{" > }
TOKEN : { < CLOSECBRACKET : "}" > }

//Functions
TOKEN : { < VAR_NAME : ["A"-"Z", "a"-"z", "@"] (["A"-"Z", "a"-"z", "0"-"9", "'"])* > }
TOKEN : { < FUNCTION_ARROW : "->" > }
TOKEN : { < GUARD : "|" > }
TOKEN : { < GUARD_ARROW : "->>" > }

//Comments
SKIP : { < "#" (~["\r", "\n"])* > }
SKIP : { < "###" (~["#"])* "###" > }

//Whitespace
SKIP : { "\n" | "\r" | " " }

/** Main endpoint */
void input() throws Exception : {} {
  expression() eof()
}

void eof() throws Exception : {} {
  	<EOF>
}

void anyOperator() throws Exception : {} {
	<BOOLEAN_OP> | <OP> | <SET_OP>
}

void includedSet() throws Exception : {} {
	<INCLUDE> set() <IN> expression()
}

FL_Set set() throws Exception : { FL_Set set; Token attrName; Object attrValue; } {
  	{ set = new FL_Set(); }
	(
	  <IMPURE>
	  { set.impure = true;}
	)?
	<OPENCBRACKET>
	(
	  attrName = <VAR_NAME>
	  <EQUALS>
	  attrValue = functionResult()
	  { set.attributes.put(attrName.image, attrValue); }
	)*
	<CLOSECBRACKET>
	{
	  set.checkPurity();
	  return print(set);
	}
}

FL_Enum enumeration() throws Exception : { FL_Enum flEnum; Token element; } {
    { flEnum = new FL_Enum(); }
	<ENUM_OPEN>
	
	element = <CAPS>
	{ flEnum.elements.add(element.image); }

	(
	  <COMMA>
	  element = <CAPS>
	  { flEnum.elements.add(element.image); }
	)*

	<ENUM_CLOSE>
	{ return flEnum; } 
}

Object functionResult() throws Exception : {} {
	(LOOKAHEAD(2) lambda() | expression() | guards() | enumeration() | matches()) <SEMICOLON> { return null; }
}

FL_Function lambda() throws Exception : { FL_Function function; Token paramName; Object innerExpression; } {
	{ function = new FL_Function(); }
	
	(
	  LOOKAHEAD(3)
	  paramName = <VAR_NAME>
	  { function.parameters.add(paramName.image); }
	  <FUNCTION_ARROW>
	)+

	(
	    innerExpression = expression()
	  | innerExpression = guards()
	  | innerExpression = matches()
	)

	{
	  function.expression = innerExpression;
	  return function;
	}
}

List<Object> list() throws Exception : { List<Object> list; Object nextItem; } {
	{ list = new LinkedList<Object>(); }

  	//Open bracket
  	<OPENSBRACKET> (
  	  
		//Empty list		<CLOSESBRACKET> { return list; }
		|
		//Non-empty list
		nextItem = enclosedExpression()
		{ list.add(nextItem); }
		
		(LOOKAHEAD(2) <COMMA>
			nextItem = enclosedExpression()
			{ list.add(nextItem); }
		)*
		<CLOSESBRACKET>
	)
	{ return list; }
}

Object enclosedExpression() throws Exception : {} {
	(<OPENBRACKET> expression() <CLOSEBRACKET>) {  return null; } | singleExpression() { return null; }
}

float number() throws Exception : { Token value; float f; } {
	  value = <NUMBER> 				  { return Float.valueOf(value.image); }
	| value = <FLOATING_POINT_NUMBER> { return Float.valueOf(value.image); }
}

Object expression() throws Exception : {} {
  	(  	  LOOKAHEAD(2) lambda() { return null; }
	  | <VAR_NAME> (
		(LOOKAHEAD(2) singleExpression() | enclosedExpression())+ { return null; }
		| <SELECT> (
		  <CAPS> { return null; }
		  | <VAR_NAME> (<SELECT> (<VAR_NAME>|<CAPS>))* { return null; }
		)
		| (LOOKAHEAD(2) anyOperator() (LOOKAHEAD(3) expression() | enclosedExpression()))* { return null; }
	  )
	)
	| set() (
	  (<SELECT> <VAR_NAME>)+ { return null; }
	  | (LOOKAHEAD(2) <SET_OP> set())* { return null; }
	)
	| includedSet() (LOOKAHEAD(2) <SET_OP> includedSet())* { return null; }
	| list() (LOOKAHEAD(2) <CONCAT> expression())* { return null; }
	| number() (LOOKAHEAD(2) <OP> number())* { return null; }
	| <STRING> ((<CONTAINS> (set()|<VAR_NAME>) | (LOOKAHEAD(2) <CONCAT> <STRING>)*)) { return null; }
	| <BOOLEAN> (LOOKAHEAD(2) <BOOLEAN_OP> <BOOLEAN>)* { return null; }
	| builtinFunctions() { return null; }
}

void builtinFunctions() throws Exception : {} {
	<IMPORT> (<STRING> | <VAR_NAME>)
    | <PRINT> (<STRING> | <VAR_NAME>)
	| <EXEC> <STRING> 
}

void singleExpression() throws Exception : {} {
	set() | <VAR_NAME> | list() | number() | <STRING> | <BOOLEAN>
}

FL_Matches matches() throws Exception : { FL_Matches matches; } {
	{ matches = new FL_Matches();}
  
	<MATCH> <VAR_NAME> 
	(LOOKAHEAD(2) <GUARD> expression() <GUARD_ARROW> expression())+
	(LOOKAHEAD(2) <GUARD> <GUARD_ARROW> expression())?

	{ return matches; }
}

FL_Guards guards() throws Exception : { FL_Guards guards; Object predicate; Object expression; Object finalExpression; } {
	{ guards = new FL_Guards(); }
  
	(<GUARD>
		predicate = expression()
		<GUARD_ARROW>
		expression = expression()
		<GUARD>
		{ guards.statements.put(predicate, expression); }
	)+
	(
	  	<GUARD_ARROW>
	  	finalExpression = expression()
	  	{ guards.finalStatement = finalExpression; }
	)

	{ return guards; }
}

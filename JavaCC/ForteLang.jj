options {
	STATIC = false;
}

PARSER_BEGIN(ForteLang)

import java.util.*;
import java.util.function.*;
import java.util.stream.*;
import java.lang.reflect.Field;
import java.io.*;

public class ForteLang {

	static interface Evaluatable { }

	/** Class declarations */

	//Function declaration, e.g. x -> y -> x + y
	static class FL_Function implements Evaluatable {
		String parameter;
		Object expression;

		@Override public String toString() { return "FL_Function(" + parameter + ") -> (" + expression + ")"; }

		static class FL_Function_Builder {
			Stack<String> parameters;
			Object expression;
		  
			public FL_Function_Builder() {
				parameters = new Stack<String>();
			}

			public FL_Function build() {
			  	Object currentExpression = expression;
			  	while(!parameters.empty()) {
					FL_Function newExpression = new FL_Function();
					newExpression.parameter = parameters.pop();
					newExpression.expression = currentExpression;
					currentExpression = newExpression;
			  	}
				return (FL_Function) currentExpression;
			}
		}
	}

	//Function call, e.g. myFunc 2 3
	static class FL_Function_Call implements Evaluatable {
		FL_Var functionName;
		LinkedList<Object> arguments;

		public FL_Function_Call() {
			arguments = new LinkedList<Object>();
		}

		@Override public String toString() { return "FL_Function_Call(" + functionName + ") " + arguments; }
	}

	static class FL_Set implements Evaluatable {
		boolean impure;
		LinkedHashMap<String, Object> attributes;

		public FL_Set() { attributes = new LinkedHashMap<String, Object>(); }

		public FL_Set clone() {
			FL_Set newSet = new FL_Set();
			newSet.impure = impure;
			newSet.attributes = new LinkedHashMap<String, Object>(attributes);
			return newSet;
		}

		public void checkPurity(Token setDeclaration) throws Exception {
		  //TODO: Make this code WAY more elegant, like seriously... what even
			if(!impure) {
				for(String str: attributes.keySet()) {
					if(str.startsWith("@")) {
						throw new Exception("impure set detected and isn't declared as 'impure'");
					}
				}
				
				for(Object o : attributes.values()) {
					if(o instanceof FL_Set) {
						if(((FL_Set) o).impure) {
							throw new Exception("Set detected as impure due to inner attribute and isn't declared as 'impure'" + location(setDeclaration));
						}
					}
				}
			} else {
				for(String str: attributes.keySet()) {
					if(str.startsWith("@")) {
						return;
					}
				}
				for(Object o : attributes.values()) {
					if(o instanceof FL_Set) {
						if(((FL_Set) o).impure) {
							return;
						}
					}
				}
				throw new Exception("impure keyword detected, but the set is actually pure" + location(setDeclaration));
			}
		}

		public boolean isImpure() {
			for(String str: attributes.keySet()) {
				if(str.startsWith("@")) {
					return true;
				}
			}
			
			for(Object o : attributes.values()) {
				if(o instanceof FL_Set) {
					if(((FL_Set) o).impure) {
						return true;
					}
				}
			}
			return false;
		}

		@Override public String toString() {
		  return "FL_Set[impure=" + impure + ", attrs=" + attributes + "]";
		}
	}

	/** Helper functions */

	static String location(Token token) {
 		return " (Line " + token.beginLine + " in " + fileName + ")";
	}

	static String parseString(Token str) {
		return str.image.substring(1, str.image.length() - 1);
	}

	/** Other declared objects */

	static class FL_List implements Evaluatable {
		LinkedList<Object> list;
		public FL_List() { list = new LinkedList<Object>(); }
		
		@Override public String toString() {
		  return "FL_List" + list;
		}
	}

	static class FL_Guards implements Evaluatable {
		LinkedHashMap<Object, Object> statements;
		Object finalStatement;

		public FL_Guards() { statements = new LinkedHashMap<Object, Object>(); }

		@Override public String toString() {
		  return "FL_Guards[stmts=" + statements + ", finalStmt=" + finalStatement + "]";
		}
	}

	static class FL_IncludedSet implements Evaluatable {
		FL_Set set;
		Object expression;

		@Override public String toString() {
		  return "FL_IncludedSet[set=" + set + ", expr=" + expression + "]";
		}
	}

	static class FL_Var implements Evaluatable {
		String name;

		public FL_Var(String name) {
			this.name = name;
		}

		@Override public String toString() {
		  return "FL_Var[name=" + name + "]";
		}
	}

	static class FL_OpExpr implements Evaluatable {
		Object initVar;
		LinkedList<Token> operators;
		LinkedList<Object> expressionsToParse;

		public FL_OpExpr() {
		  	operators = new LinkedList<Token>();
			expressionsToParse = new LinkedList<Object>();
		}

		@Override public String toString() {
		  	return "FL_OpExpr[init=" + initVar + "" + operators + "" + expressionsToParse + "]";
		}
	}

	static class FL_Builtin implements Evaluatable {
		Object param;
		enum Builtin { IMPORT, PRINT, EXEC, HEAD, TAIL }

		Builtin type;

		public FL_Builtin(Builtin type, Object param) {
			this.type = type;
			this.param = param;
		}
	}

	/** Static fields */
	static String fileName;


	/** Main method */
	public static void main(String[] args) throws ParseException, FileNotFoundException {
	  	if(args.length != 1) {
	  	  	System.out.println("Usage: java ForteLang <File>");
			return;
	  	}

	  	File file = new File(args[0]);
	  	fileName = file.getName();
		try {
		  	/* Run the parser */

			Object result = new ForteLang(new FileInputStream(file)).input();
			System.out.println("Final result: " + result);
			
		} catch(Exception e) {
		  	e.printStackTrace();
		  	return;
		}
	}

	public static <T> T print(T o) throws Exception {
	  	StringBuilder builder = new StringBuilder();
	  	builder.append(o.getClass().getName() + "[");
		for(Field f : o.getClass().getDeclaredFields()) {
			builder.append(f.getName() + ": " + f.get(o).toString() + "; ");
		}
		System.out.println(builder.append("]").toString());
		return o;
	}

	static class OperatorParser {

		enum Operator { BOOLEAN, NUMERICAL, SET, COMPARATOR };

		Operator operatorKind;
		String op;
	  
		public OperatorParser(Token operator) {
			switch(operator.kind) {
				case ForteLangConstants.BOOLEAN_OP:
					operatorKind = Operator.BOOLEAN;
					break;
				case ForteLangConstants.OP:
					operatorKind = Operator.NUMERICAL;
					break;
				case ForteLangConstants.SET_OP:
					operatorKind = Operator.SET;
					break;
				case ForteLangConstants.COMPARATOR_OP:
					operatorKind = Operator.COMPARATOR;
					break;
				default:
					operatorKind = null;
					break;
			}
			op = operator.image;
		}

		public Object apply(Object o1, Object o2) throws Exception {
			switch(operatorKind) {
				case BOOLEAN:
					return applyBoolean((boolean) o1, (boolean) o2);
				case NUMERICAL:
					return applyDouble((double) o1, (double) o2);
				case SET:
					return applySetObjects((FL_Set) o1, (FL_Set) o2);
				case COMPARATOR:
					return applyComparator(o1, o2); 
			}
			throw new Exception ("Failed to apply any operators");
		}

		public boolean applyComparator(Object o1, Object o2) throws Exception {
			switch(op) {
				case ">":
					return (double) o1 > (double) o2;
				case "<":
					return (double) o1 < (double) o2;
				case "<=":
					return (double) o1 <= (double) o2;
				case ">=":
					return (double) o1 >= (double) o2;
				case "==":
					return o1.equals(o2);
				case "!=":
					return !o1.equals(o2);
			}
			throw new Exception ("Invalid operator (expected comparator operator");
		}

		public double applyDouble(double f1, double f2) throws Exception {
			if(operatorKind != Operator.NUMERICAL) {
				throw new Exception("Invalid operator (expected numerical operator)");
		  	}

		  	//TODO: operator precedence
			switch(op) {
				case "+":
					return f1 + f2;
				case "*":
					return f1 * f2;
				case "-":
					return f1 - f2;
				case "/":
					return f1 / f2;
				case "%":
					return (int) f1 % (int) f2;
			}
			throw new Exception("Invalid operator " + op);
		}

		public boolean applyBoolean(boolean b1, boolean b2) throws Exception {
			if(operatorKind != Operator.BOOLEAN) {
				throw new Exception("Invalid operator (expected boolean operator)");
		  	}
			switch(op) {
				case "||":
					return b1 || b2;
				case "&&":
					return b1 && b2;
			}
			throw new Exception("Invalid operator " + op);
		}

		public FL_Set applySetObjects(FL_Set s1, FL_Set s2) throws Exception {
			if(operatorKind != Operator.SET) {
				throw new Exception("Invalid operator (expected set operator)");
		  	}

			FL_Set newSet = new FL_Set();
			newSet.attributes = new LinkedHashMap<String, Object>(s1.attributes);
		  	
			switch(op) {
			  	//union
				case "/+": {
				  	newSet.impure = (s1.impure || s2.impure);
				  	newSet.attributes.putAll(s2.attributes);
					break;
				}
				//intersect
				case "/-": {
				  	newSet.attributes.putAll(s1.attributes);
				  	newSet.attributes.keySet().retainAll(s2.attributes.keySet());
				  	for(String key : newSet.attributes.keySet()) {
						newSet.attributes.put(key, s1.attributes.get(key));
				  	}
				  	newSet.impure = newSet.isImpure(); 
					break;
				}
				//difference
				case "//": {
				  	for(String key : s2.attributes.keySet()) {
						newSet.attributes.remove(key);
				  	}
				  	newSet.impure = newSet.isImpure(); 
					break;
				}
			}
			return newSet;
		} 
	}

	public static Object evaluate(FL_Set scope, Object expression) throws Exception {
	  	scope = scope.clone();
	  	System.out.println();
	  	//System.out.println(scope);
	  	if(expression instanceof Evaluatable) {

	  	  	//System.out.println(expression.getClass().getName());
//	  	  	System.out.println(expression);
	  	  	
	  	  	if(expression instanceof FL_Builtin) {
				FL_Builtin builtin = (FL_Builtin) expression;
				Object builtinParam = evaluate(scope, builtin.param);
//				//TODO: Fix for when builtins require non-String types
//				if(!(builtinParam instanceof String)) {
//					throw new Exception("Builtin parameter " + builtinParam + " did not evaluate to a String");
//				}
//				String builtinParamStr = (String) builtinParam;
				switch(builtin.type) {
					case IMPORT:
						File file = new File((String) builtinParam);
						return new ForteLang(new FileInputStream(file)).input();
					case PRINT:
						System.out.println((String) builtinParam);
						return builtinParam;
					case EXEC:
						break;
					case HEAD:
						if(!(builtinParam instanceof FL_List)) {
							throw new Exception("head function requires a list as a parameter");
						} else {
						  	return ((FL_List) builtinParam).list.getFirst();
						} 
					case TAIL:
						if(!(builtinParam instanceof FL_List)) {
							throw new Exception("tail function requires a list as a parameter");
						} else {
						  	((FL_List) builtinParam).list.remove();
						  	return builtinParam;
						}
						/*
						TODO: 
					
					    ### Things to do
					    all = list -> false; 
					    filter = list -> [];
					    foldl = op -> init -> list -> 2;
					    length = list -> 0;
					    map = list;
					    ###
						*/
				}
	  	  	  
			} else if(expression instanceof FL_Function_Call) {
				FL_Function_Call call = (FL_Function_Call) expression;
				Object function = scope.attributes.get(call.functionName.name);
				if(function instanceof FL_Function) {
//					System.out.println("About to evaluate the following: ");
//					System.out.println(function);
//					System.out.println("With parameters " + call.arguments);
					while(function instanceof FL_Function) {
					  	FL_Function func = (FL_Function) function;
						scope.attributes.put(func.parameter, call.arguments.pop());
						function = func.expression;
					}
//					System.out.println("Applied parameters");
//					System.out.println(function);
					return evaluate(scope, function);
				} else {
				  	System.out.println("Didn't get what I wanted, but proceeding anyway...");
				  	return evaluate(scope, function);
					//throw new Exception("Tried to perform a function call on something that's not a function, " + function.getClass().getName());
				}

			} else if(expression instanceof FL_Guards) {
				FL_Guards guards = (FL_Guards) expression;
				for(Object guardExpr : guards.statements.keySet()) {
					Object result = evaluate(scope, guardExpr);
					if(result instanceof Boolean) {
						boolean resultBool = (boolean) result;
						if(!resultBool) {
							continue;
						} else {
							return evaluate(scope, guards.statements.get(guardExpr));
						}
					} else {
						throw new Exception(result + " is not a valid Boolean object in guard expression!");
					}
				}
				return evaluate(scope, guards.finalStatement);
			} else if(expression instanceof FL_Var) {
				FL_Var flVar = (FL_Var) expression;
				Object var = scope.attributes.get(flVar.name);
				while(var instanceof FL_Var) {
					var = scope.attributes.get(((FL_Var)var).name);
				}
				if(var == null) {
					throw new Exception("Could not find function \"" + flVar.name + "\" in the program!");
				}
				System.out.println(flVar.name + ": " + var);
				return evaluate(scope, var);
			} else if(expression instanceof FL_OpExpr) {
				FL_OpExpr flVarOp = (FL_OpExpr) expression;

				System.out.println("\n\nAbout to evaluate OpExpr:");
				System.out.println(flVarOp);
				
			  	Object init = flVarOp.initVar;
			  	Object next = flVarOp.expressionsToParse.pop();

			  	while (init instanceof Evaluatable) {
					init = evaluate(scope, init);
			  	}

			  	while (next instanceof Evaluatable) {
			  	  	System.out.println("Evaluating..." + next);
					next = evaluate(scope, next);
			  	}

				//System.out.println(init + " " + next);
			  	
			  	Object newInit = new OperatorParser(flVarOp.operators.pop()).apply(init, next);

			  	if(flVarOp.expressionsToParse.isEmpty()) {
					return evaluate(scope, newInit);
			  	} else {
					FL_OpExpr newOp = new FL_OpExpr();
					newOp.initVar = newInit;
					newOp.operators = flVarOp.operators;
					newOp.expressionsToParse = flVarOp.expressionsToParse;
					return evaluate(scope, newOp);
			  	}
			} else if(expression instanceof FL_List) {
				FL_List list = (FL_List) expression;
				ListIterator<Object> iterator = list.list.listIterator(0);
				while(iterator.hasNext()) {
					Object expr = iterator.next();
					iterator.set(evaluate(scope, expr));
				}
				return list;
			} else if(expression instanceof FL_IncludedSet) {
			  	FL_IncludedSet incSet = (FL_IncludedSet) expression;
				scope.attributes.putAll(incSet.set.attributes);
				return evaluate(scope, incSet.expression);
			}
			throw new Exception("Not implemented yet, could not evaluate: " + expression);
	  	} else {
//	  	  System.out.println("Primitive result: ");
	  	  return expression;
	  	}
	}

}

PARSER_END(ForteLang)

//Operators
TOKEN : { < COMPARATOR_OP : ">" | "<" | "<=" | ">=" | "==" | "!=" > }
TOKEN : { < BOOLEAN_OP : "||" | "&&" > }
TOKEN : { < SET_OP : "/+" | "/-" | "//" > }
TOKEN : { < OP : "+" | "*" | "-" | "/" | "%" > }
TOKEN : { < CONCAT : "++" > }
TOKEN : { < SELECT : "." > }
TOKEN : { < CONTAINS : "?" > }

//Data types
TOKEN : { < NUMBER : ("-")? (["0"-"9"])+ > }
TOKEN : { < FLOATING_POINT_NUMBER : <NUMBER>"."<NUMBER> > }
TOKEN : { < BOOLEAN : "true" | "false" > } 
TOKEN : { < STRING : "\"" ("\\" ~[] | ~["\"", "\\"])* "\"" >}

//Keywords
TOKEN : { < INCLUDE : "include" > }
TOKEN : { < IN : "in" > }
TOKEN : { < IMPURE : "impure" > }
TOKEN : { < MATCH : "match" > }

//Built-in functions
TOKEN : { < IMPORT : "import" > }
TOKEN : { < EXEC : "@exec" > }
TOKEN : { < PRINT : "@print" > }
TOKEN : { < HEAD : "head" > }
TOKEN : { < TAIL : "tail" > }

//Brackets
TOKEN : { < OPENBRACKET : "(" > }
TOKEN : { < CLOSEBRACKET : ")" > }

//Lists
TOKEN : { < OPENSBRACKET : "[" > }
TOKEN : { < CLOSESBRACKET : "]" > }
TOKEN : { < COMMA : "," > }

//Enums
TOKEN : { < CAPS : (["A"-"Z", "_"])+ > }
TOKEN : { < ENUM_OPEN : " {|" > }
TOKEN : { < ENUM_CLOSE : "|}" > }

//Sets
TOKEN : { < EQUALS : "=" > }
TOKEN : { < SEMICOLON : ";" > }
TOKEN : { < OPENCBRACKET : "{" > }
TOKEN : { < CLOSECBRACKET : "}" > }

//Functions
TOKEN : { < VAR_NAME : ["A"-"Z", "a"-"z", "@"] (["A"-"Z", "a"-"z", "0"-"9", "'"])* > }
TOKEN : { < FUNCTION_ARROW : "->" > }
TOKEN : { < GUARD : "|" > }
TOKEN : { < GUARD_ARROW : "->>" > }

//Comments
SKIP : { < "#" (~["\r", "\n"])* > }
SKIP : { < "###" (~["#"])* "###" > }

//Whitespace
SKIP : { "\n" | "\r" | " " }

/** Main endpoint */
Object input() throws Exception : { Object expression; Object result; } {
  expression = enclosedExpression()
  <EOF>
  {
    if(expression instanceof FL_IncludedSet) {
    	FL_IncludedSet flIS = (FL_IncludedSet) expression;
    	return evaluate(flIS.set, flIS.expression);
    } else {
		return evaluate(new FL_Set(), expression);
    }
  }
}

Token anyOperator() throws Exception : { Token op; } {
	  op = <BOOLEAN_OP>    { return op; }
	| op = <OP>            { return op; }
	| op = <SET_OP>        { return op; }
	| op = <COMPARATOR_OP> { return op; }
	| op = <CONCAT>        { return op; }
}

FL_IncludedSet includedSet() throws Exception : { FL_IncludedSet result; Object expression; FL_Set set; } {
  	{ result = new FL_IncludedSet(); }
	<INCLUDE>
	set = set()
	<IN>
	expression = enclosedExpression()

	{
	  result.set = set;
	  result.expression = expression;
	  return result;
	}
}

FL_Set set() throws Exception : { FL_Set set; Token setDeclaration; Token attrName; Object attrValue; } {
  	{ set = new FL_Set(); }
	(
	  <IMPURE>
	  { set.impure = true;}
	)?
	setDeclaration = <OPENCBRACKET>
	(
	  attrName = <VAR_NAME>
	  <EQUALS>
	  attrValue = enclosedExpression()
	  <SEMICOLON>
	  { set.attributes.put(attrName.image, attrValue); }
	)*
	<CLOSECBRACKET>
	{
	  set.checkPurity(setDeclaration);
	  return set;//print(set); //TODO: Remove this
	}
}

FL_Function lambda() throws Exception : { FL_Function.FL_Function_Builder function; Token paramName; Object innerExpression; } {
	{ function = new FL_Function.FL_Function_Builder(); }
	
	paramName = <VAR_NAME>
	<FUNCTION_ARROW>
	innerExpression = enclosedExpression()
	  
	{
	    function.parameters.push(paramName.image);
	    function.expression = innerExpression;
	    return function.build();
	}
}

FL_List list() throws Exception : { FL_List list; Object nextItem; } {
	{ list = new FL_List(); }

  	//Open bracket
  	<OPENSBRACKET> (
  	  
		//Empty list		<CLOSESBRACKET> { return list; }
		|
		//Non-empty list
		nextItem = enclosedExpression()
		{ list.list.add(nextItem); }
		
		(LOOKAHEAD(2) <COMMA>
			nextItem = enclosedExpression()
			{ list.list.add(nextItem); }
		)*
		<CLOSESBRACKET>
	)
	{ return list; }
}

double number() throws Exception : { Token value; double f; } {
	  value = <NUMBER> 				  { return Double.valueOf(value.image); }
	| value = <FLOATING_POINT_NUMBER> { return Double.valueOf(value.image); }
}

/** Expressions */
Object enclosedExpression() throws Exception : { Object result; Token vName;  } {
	( 
	  <OPENBRACKET>
	  result = vExpr()
	  <CLOSEBRACKET>
	   { return result; }
	)
	|  LOOKAHEAD(2)  (
	  vName = <VAR_NAME>
	  result = functionCall(vName) 
	  ) { return result; }

	| result = vExpr() {return result; }
}

Object vExpr() throws Exception : { Object result; Token vName;  } {
  	result = opExpression() { return result; }
}

Object expression() throws Exception : { Object result; } {
 	LOOKAHEAD(2)
 	  result = lambda()                          { return result; }  
	| result = singleExpression()                { return result; }
}

Object singleExpression() throws Exception : { Object result; Token token; } {
	  result = set() { return result; }
	| token = <VAR_NAME> { return new FL_Var(token.image); }
	| result = includedSet() { return result; }
	| result = list() { return result; }
	| result = number() { return result; }
	| result = guards() { return result; }
	| token = <STRING> { return parseString(token); }
	| token = <BOOLEAN> { return Boolean.parseBoolean(token.image); }
}

Object opExpression() throws Exception : { FL_OpExpr result; Object expr; Token operator; boolean isOpExpr; } {
  	{
  	  	result = new FL_OpExpr();
  		isOpExpr = false;
  	}

  	expr = expression()
  	{ result.initVar = expr; }
	(
	  LOOKAHEAD(2) //TODO: Why is this lookahead here?
	  operator = anyOperator()
	  { result.operators.add(operator); }

	  expr = expression()
	  { result.expressionsToParse.add(expr); }

	  { isOpExpr = true; }
	)*
	{
		if(isOpExpr) {
			return result;
		} else {
			return expr;
		}
	}
}

Object variableExpression() throws Exception : { Object result; Token varName; } {
  	varName = <VAR_NAME> 
	result = functionCall(varName)
	{ return result; }  
}

FL_Function_Call functionCall(Token varName) throws Exception : { FL_Function_Call result; Object param; } {
  	{
  	   	result = new FL_Function_Call();
		result.functionName = new FL_Var(varName.image);
  	}
  	
	(
	  LOOKAHEAD(2)
	  param = enclosedExpression()
	  { result.arguments.add(param); }
	)+

	{ return result; }
}

Object builtinFunctions() throws Exception : { Object param; Token stringToken; } {
	<IMPORT>  (LOOKAHEAD(2) stringToken = <STRING> { param = parseString(stringToken); } | param = enclosedExpression()) { return new FL_Builtin(FL_Builtin.Builtin.IMPORT, param); }
    | <PRINT> (LOOKAHEAD(2) stringToken = <STRING> { param = parseString(stringToken); } | param = enclosedExpression()) { return new FL_Builtin(FL_Builtin.Builtin.PRINT, param); }
	| <EXEC>  (LOOKAHEAD(2) stringToken = <STRING> { param = parseString(stringToken); } | param = enclosedExpression()) { return new FL_Builtin(FL_Builtin.Builtin.EXEC, param); }
	| <HEAD>  param = enclosedExpression() { return new FL_Builtin(FL_Builtin.Builtin.HEAD, param); }
	| <TAIL>  param = enclosedExpression() { return new FL_Builtin(FL_Builtin.Builtin.TAIL, param); }
}

FL_Guards guards() throws Exception : { FL_Guards guards; Object predicate; Object expression; Object finalExpression; Token firstGuard; } {
	{ guards = new FL_Guards(); expression = null; }
  
	(
	  	firstGuard = <GUARD>
		predicate = enclosedExpression()
		expression = guardArrow()
		{ guards.statements.put(predicate, expression); }
	)+
	finalExpression = guardArrow()
	{
	  guards.finalStatement = finalExpression;
	  return guards;
	}
}

Object guardArrow() throws Exception : {Object expression; } {
	<GUARD_ARROW>
	expression = enclosedExpression()
	{ return expression; }
}
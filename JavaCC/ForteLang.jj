PARSER_BEGIN(ForteLang)

import java.util.*;
import java.util.function.*;
import java.util.stream.*;
import java.lang.reflect.Field;

public class ForteLang {

	/** Class declarations */
	static class FL_Function {
		List<String> parameters;
		Object expression;

		public FL_Function() { parameters = new LinkedList<String>(); }
		@Override public String toString() { return "FL_Function" + parameters; }

		/*
		Don't forget currying!
		x -> y -> true is actually equal to x -> (y -> true)
		*/
	}

	static class FL_Set {
		boolean impure;
		LinkedHashMap<String, Object> attributes;

		public FL_Set() { attributes = new LinkedHashMap<String, Object>(); }

		public void checkPurity() throws Exception {
			if(!impure) {
				for(String str: attributes.keySet()) {
					if(str.startsWith("@")) {
						throw new Exception("impure set detected and isn't declared as 'impure'");
					}
				}
			}
		}
	}

	static class FL_Guards {
		LinkedHashMap<Object, Object> statements;
		Object finalStatement;

		public FL_Guards() { statements = new LinkedHashMap<Object, Object>(); }
	}

	static class FL_Matches {
		LinkedHashMap<Object, Object> statements;
		Object finalStatement;

		public FL_Matches() { statements = new LinkedHashMap<Object, Object>(); }
	}

	static class FL_Enum {
		List<String> elements;
		
		public FL_Enum() { elements = new LinkedList<String>(); }
		@Override public String toString() { return "ENUM" + elements.toString(); }
	}

	/** Main method */
	public static void main(String[] args) throws ParseException {
		try {
		  	/* Run the parser */
			new ForteLang(System.in).input();
			System.out.println("PASS");
		} catch(Exception e) {
		  	e.printStackTrace();
		  	return;
		}

		//Begin interpreting system
	}

	public static <T> T print(T o) throws Exception {
	  	StringBuilder builder = new StringBuilder();
	  	builder.append(o.getClass().getName() + "[");
		for(Field f : o.getClass().getDeclaredFields()) {
			builder.append(f.getName() + ": " + f.get(o).toString() + "; ");
		}
		System.out.println(builder.append("]").toString());
		return o;
	}

	static class OperatorParser {

		enum Operator { BOOLEAN, NUMERICAL, SET };

		Operator operatorKind;
		String op;
	  
		public OperatorParser(Token operator) {
			switch(operator.kind) {
				case ForteLangConstants.BOOLEAN_OP:
					operatorKind = Operator.BOOLEAN;
					break;
				case ForteLangConstants.OP:
					operatorKind = Operator.NUMERICAL;
					break;
				case ForteLangConstants.SET_OP:
					operatorKind = Operator.SET;
					break;
				default:
					operatorKind = null;
					break;
			}
			op = operator.image;
		}

		public float applyFloat(float f1, float f2) throws Exception {
			if(operatorKind != Operator.NUMERICAL) {
				throw new Exception("Invalid operator (expected numerical operator)");
		  	}
			switch(op) {
				case "+":
					return f1 + f2;
				case "*":
					return f1 * f2;
				case "-":
					return f1 - f2;
				case "/":
					return f1 / f2;
			}
			throw new Exception("Invalid operator " + op);
		}

		public boolean applyBoolean(boolean b1, boolean b2) throws Exception {
			if(operatorKind != Operator.BOOLEAN) {
				throw new Exception("Invalid operator (expected boolean operator)");
		  	}
			switch(op) {
				case "||":
					return b1 || b2;
				case "&&":
					return b1 && b2;
			}
			throw new Exception("Invalid operator " + op);
		} 
	}
}

PARSER_END(ForteLang)

//Operators
TOKEN : { < COMPARATOR_OP : ">" | "<" | "<=" | ">=" | "==" | "!=" > }
TOKEN : { < BOOLEAN_OP : "||" | "&&" > }
TOKEN : { < SET_OP : "/+" | "/-" | "//" > }
TOKEN : { < OP : "+" | "*" | "-" | "/" > }
TOKEN : { < CONCAT : "++" > }
TOKEN : { < SELECT : "." > }
TOKEN : { < CONTAINS : "?" > }

//Data types
TOKEN : { < NUMBER : ("-")? (["0"-"9"])+ > }
TOKEN : { < FLOATING_POINT_NUMBER : <NUMBER>"."<NUMBER> > }
TOKEN : { < BOOLEAN : "true" | "false" > } 
TOKEN : { < STRING : "\"" ("\\" ~[] | ~["\"", "\\"])* "\"" >}

//Keywords
TOKEN : { < INCLUDE : "include" > }
TOKEN : { < IN : "in" > }
TOKEN : { < IMPURE : "impure" > }
TOKEN : { < MATCH : "match" > }

//Built-in functions
TOKEN : { < IMPORT : "import" > }
TOKEN : { < EXEC : "@exec" > }
TOKEN : { < PRINT : "@print" > }

//Brackets
TOKEN : { < OPENBRACKET : "(" > }
TOKEN : { < CLOSEBRACKET : ")" > }

//Lists
TOKEN : { < OPENSBRACKET : "[" > }
TOKEN : { < CLOSESBRACKET : "]" > }
TOKEN : { < COMMA : "," > }

//Enums
TOKEN : { < CAPS : (["A"-"Z", "_"])+ > }
TOKEN : { < ENUM_OPEN : " {|" > }
TOKEN : { < ENUM_CLOSE : "|}" > }

//Sets
TOKEN : { < EQUALS : "=" > }
TOKEN : { < SEMICOLON : ";" > }
TOKEN : { < OPENCBRACKET : "{" > }
TOKEN : { < CLOSECBRACKET : "}" > }

//Functions
TOKEN : { < VAR_NAME : ["A"-"Z", "a"-"z", "@"] (["A"-"Z", "a"-"z", "0"-"9", "'"])* > }
TOKEN : { < FUNCTION_ARROW : "->" > }
TOKEN : { < GUARD : "|" > }
TOKEN : { < GUARD_ARROW : "->>" > }

//Comments
SKIP : { < "#" (~["\r", "\n"])* > }
SKIP : { < "###" (~["#"])* "###" > }

//Whitespace
SKIP : { "\n" | "\r" | " " }

/** Main endpoint */
void input() throws Exception : { Object result; } {
  result = expression()
  {
    System.out.println();
    System.out.println("Finished prior evaluation");
    System.out.println("Preparing to evaluate: " + result);
  }
  eof()
}

void eof() throws Exception : {} {
  	<EOF>
}

void anyOperator() throws Exception : {} {
	<BOOLEAN_OP> | <OP> | <SET_OP> | <COMPARATOR_OP>
}

void includedSet() throws Exception : {} {
	<INCLUDE> set() <IN> expression()
}

FL_Set set() throws Exception : { FL_Set set; Token attrName; Object attrValue; } {
  	{ set = new FL_Set(); }
	(
	  <IMPURE>
	  { set.impure = true;}
	)?
	<OPENCBRACKET>
	(
	  attrName = <VAR_NAME>
	  <EQUALS>
	  attrValue = functionResult()
	  {
	    if(set.attributes.containsKey(attrName.image)) {
			System.out.println("'" + attrName.image + "' already exists in the set... overriding");
	    }
	    set.attributes.put(attrName.image, attrValue);
	  }
	)*
	<CLOSECBRACKET>
	{
	  set.checkPurity();
	  return print(set);
	}
}

FL_Enum enumeration() throws Exception : { FL_Enum flEnum; Token element; } {
    { flEnum = new FL_Enum(); }
	<ENUM_OPEN>
	
	element = <CAPS>
	{ flEnum.elements.add(element.image); }

	(
	  <COMMA>
	  element = <CAPS>
	  { flEnum.elements.add(element.image); }
	)*

	<ENUM_CLOSE>
	{ return flEnum; } 
}

Object functionResult() throws Exception : { Object result; } {
	(
	  LOOKAHEAD(2)
	    result = lambda()
	  | result = expression()
	  | result = guards()
	  | result = enumeration()
	  | result = matches()
	)
	<SEMICOLON>

	{ return result; }
}

FL_Function lambda() throws Exception : { FL_Function function; Token paramName; Object innerExpression; } {
	{ function = new FL_Function(); }
	
	(
	  LOOKAHEAD(3)
	  paramName = <VAR_NAME>
	  { function.parameters.add(paramName.image); }
	  <FUNCTION_ARROW>
	)+

	(
	    innerExpression = expression()
	  | innerExpression = guards()
	  | innerExpression = matches()
	)

	{
	  function.expression = innerExpression;
	  return function;
	}
}

List<Object> list() throws Exception : { List<Object> list; Object nextItem; } {
	{ list = new LinkedList<Object>(); }

  	//Open bracket
  	<OPENSBRACKET> (
  	  
		//Empty list		<CLOSESBRACKET> { return list; }
		|
		//Non-empty list
		nextItem = enclosedExpression()
		{ list.add(nextItem); }
		
		(LOOKAHEAD(2) <COMMA>
			nextItem = enclosedExpression()
			{ list.add(nextItem); }
		)*
		<CLOSESBRACKET>
	)
	{ return list; }
}

Object enclosedExpression() throws Exception : { Object result; } {
	(
	  <OPENBRACKET>
	  result = expression()
	  <CLOSEBRACKET>
	   { return result; }
	)
	| result = singleExpression() { return result; }
}

float number() throws Exception : { Token value; float f; } {
	  value = <NUMBER> 				  { return Float.valueOf(value.image); }
	| value = <FLOATING_POINT_NUMBER> { return Float.valueOf(value.image); }
}

/** Expressions */
Object expression() throws Exception : { Object result; } {
  	(  	  LOOKAHEAD(2) result = lambda() { return result; }
	  | <VAR_NAME> (
		(LOOKAHEAD(2) singleExpression() | enclosedExpression())+ { return "function call"; }
		| <SELECT> (
		  <CAPS> { return null; }
		  | <VAR_NAME> (<SELECT> (<VAR_NAME>|<CAPS>))* { return "enum selection"; }
		)
		| (LOOKAHEAD(2) anyOperator() (LOOKAHEAD(3) expression() | enclosedExpression()))* { return "variable operator"; }
	  )
	)
	| set() (
	  (<SELECT> <VAR_NAME>)+ { return "set selection"; }
	  | (LOOKAHEAD(2) <SET_OP> set())* { return "set operation"; }
	)
	| includedSet() { return "set operator with included sets"; }
	| result = listExpression()   { return result; }
	| result = numberExpression() { return result; }
	| <STRING> ((<CONTAINS> (set()|<VAR_NAME>) | (LOOKAHEAD(2) <CONCAT> <STRING>)*)) { return "string operations"; }
	| result = booleanExpression() { return result;}
	| builtinFunctions() { return "builtin"; }
}

float numberExpression() throws Exception : { float acc; Token op; float next; } {
	acc = number()
	(
	  LOOKAHEAD(2)
	  op = <OP>
	  next = number()
	  {
		 acc = new OperatorParser(op).applyFloat(acc, next);
	  }
	)*
	{ return acc; }
}

boolean booleanExpression() throws Exception : { Token first; boolean acc; Token op; Token next; } {
  	first = <BOOLEAN>
	{ acc = Boolean.parseBoolean(first.image); }
	(
	  LOOKAHEAD(2)
	  op = <BOOLEAN_OP>
	  next = <BOOLEAN>
	  {
		 acc = new OperatorParser(op).applyBoolean(acc, Boolean.parseBoolean(next.image));
	  }
	)*
	{ return acc; }
}

List<Object> listExpression() throws Exception : { List<Object> list; Object expr; } {
    list = list()
    (
      LOOKAHEAD(2)
      <CONCAT>
      expr = expression()
      {
      	if(expr instanceof List) {
			list.addAll((List) expr);
      	} else {
      	  	//TODO: Handle list concat with new stuff
			//throw new Exception("Tried to concat a list with unknown expression");
      	}
      }
    )*
	{ return list; }
}

void builtinFunctions() throws Exception : {} {
	<IMPORT> (<STRING> | <VAR_NAME>)
    | <PRINT> (<STRING> | <VAR_NAME>)
	| <EXEC> <STRING> 
}

Object singleExpression() throws Exception : { Object result; Token token; } {
	  result = set() { return result; }
	| token = <VAR_NAME> { return "VAR[" + token.image + "]"; } //TODO
	| result = list() { return result; }
	| result = number() { return result; }
	| token = <STRING> { return token.image; } //TODO
	| token = <BOOLEAN> { return Boolean.parseBoolean(token.image); } //TODO: parse boolean
}

FL_Matches matches() throws Exception : { FL_Matches matches; } {
	{ matches = new FL_Matches();}
  
	<MATCH> <VAR_NAME> 
	(LOOKAHEAD(2) <GUARD> expression() <GUARD_ARROW> expression())+
	(LOOKAHEAD(2) <GUARD> <GUARD_ARROW> expression())?

	{ return matches; }
}

FL_Guards guards() throws Exception : { FL_Guards guards; Object predicate; Object expression; Object finalExpression; } {
	{ guards = new FL_Guards(); }
  
	(<GUARD>
		predicate = expression()
		<GUARD_ARROW>
		expression = expression()
		<GUARD>
		{ guards.statements.put(predicate, expression); }
	)+
	(
	  	<GUARD_ARROW>
	  	finalExpression = expression()
	  	{ guards.finalStatement = finalExpression; }
	)

	{ return guards; }
}

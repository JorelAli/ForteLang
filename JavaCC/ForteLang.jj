PARSER_BEGIN(ForteLang)

import java.util.*;
import java.util.function.*;
import java.util.stream.*;

public class ForteLang {

	/** Class declarations */
	static class FL_Function {
		List<String> parameters;
		Object expression; 
	}

	static class FL_Set {
		boolean impure;
		LinkedHashMap<String, Object> attributes;
	} 

	/** Main method */
	public static void main(String[] args) throws ParseException {
		try {
		  	/* Run the parser */
			new ForteLang(System.in).input();
			System.out.println("PASS");
		} catch(Exception e) {
		  	e.printStackTrace();
		  	return;
		}

		//Begin interpreting system
	}
}

PARSER_END(ForteLang)

//Operators
TOKEN : { < BOOLEAN_OP : ">" | "<" | "<=" | ">=" | "==" | "!=" | "||" | "&&" > }
TOKEN : { < SET_OP : "/+" | "/-" | "//" > }
TOKEN : { < OP : "+" | "*" | "-" | "/" > }
TOKEN : { < CONCAT : "++" > }
TOKEN : { < SELECT : "." > }
TOKEN : { < CONTAINS : "?" > }

//Data types
TOKEN : { < NUMBER : ("-")? (["0"-"9"])+ > }
TOKEN : { < FLOATING_POINT_NUMBER : <NUMBER>"."<NUMBER> > }
TOKEN : { < BOOLEAN : "true" | "false" > } 
TOKEN : { < STRING : "\"" ("\\" ~[] | ~["\"", "\\"])* "\"" >}

//Keywords
TOKEN : { < INCLUDE : "include" > }
TOKEN : { < IN : "in" > }
TOKEN : { < IMPURE : "impure" > }
TOKEN : { < MATCH : "match" > }

//Built-in functions
TOKEN : { < IMPORT : "import" > }
TOKEN : { < EXEC : "@exec" > }
TOKEN : { < PRINT : "@print" > }

//Brackets
TOKEN : { < OPENBRACKET : "(" > }
TOKEN : { < CLOSEBRACKET : ")" > }

//Lists
TOKEN : { < OPENSBRACKET : "[" > }
TOKEN : { < CLOSESBRACKET : "]" > }
TOKEN : { < COMMA : "," > }

//Enums
TOKEN : { < CAPS : (["A"-"Z", "_"])+ > }
TOKEN : { < ENUM_OPEN : " {|" > }
TOKEN : { < ENUM_CLOSE : "|}" > }

//Sets
TOKEN : { < EQUALS : "=" > }
TOKEN : { < SEMICOLON : ";" > }
TOKEN : { < OPENCBRACKET : "{" > }
TOKEN : { < CLOSECBRACKET : "}" > }

//Functions
TOKEN : { < VAR_NAME : ["A"-"Z", "a"-"z", "@"] (["A"-"Z", "a"-"z", "0"-"9", "'"])* > }
TOKEN : { < FUNCTION_ARROW : "->" > }
TOKEN : { < GUARD : "|" > }
TOKEN : { < GUARD_ARROW : "->>" > }

//Comments
SKIP : { < "#" (~["\r", "\n"])* > }
SKIP : { < "###" (~["#"])* "###" > }

//Whitespace
SKIP : { "\n" | "\r" | " " }

/** Main endpoint */
void input() throws Exception : {} {
  expression() eof()
}

void eof() throws Exception : {} {
  	<EOF>
}

void anyOperator() throws Exception : {} {
	<BOOLEAN_OP> | <OP> | <SET_OP>
}

void includedSet() throws Exception : {} {
	<INCLUDE> set() <IN> expression()
}

void set() throws Exception : {} {
	(<IMPURE>)? <OPENCBRACKET>
	(<VAR_NAME> <EQUALS> functionResult())*
	<CLOSECBRACKET>
}

void enumeration() throws Exception : {} {
	<ENUM_OPEN> <CAPS> (<COMMA> <CAPS>)* <ENUM_CLOSE>
}

void functionResult() throws Exception : {} {
	(LOOKAHEAD(2) lambda() | expression() | guards() | enumeration() | matches()) <SEMICOLON>
}

void lambda() throws Exception : {} {
	(LOOKAHEAD(3) <VAR_NAME> <FUNCTION_ARROW>)+ (expression()|guards()|matches())
}

List<Object> list() throws Exception : { List<Object> list; Object nextItem; } {
	{ list = new LinkedList<Object>(); }

  	//Open bracket
  	<OPENSBRACKET> (
  	  
		//Empty list		<CLOSESBRACKET> { return list; }
		|
		//Non-empty list
		nextItem = enclosedExpression()
		{ list.add(nextItem); }
		
		(LOOKAHEAD(2) <COMMA>
			nextItem = enclosedExpression()
			{ list.add(nextItem); }
		)*
		<CLOSESBRACKET>
	)
	{ return list; }
}

Object enclosedExpression() throws Exception : {} {
	(<OPENBRACKET> expression() <CLOSEBRACKET>) {  return null; }| singleExpression() { return null; }
}

float number() throws Exception : { Token value; float f; } {
	  value = <NUMBER> 				  { return Float.valueOf(value.image); }
	| value = <FLOATING_POINT_NUMBER> { return Float.valueOf(value.image); }
}

void expression() throws Exception : {} {
  	(  	  LOOKAHEAD(2) lambda() 
	  | <VAR_NAME> (
		(LOOKAHEAD(2) singleExpression() | enclosedExpression())+
		| <SELECT> (
		  <CAPS>
		  | <VAR_NAME> (<SELECT> (<VAR_NAME>|<CAPS>))*
		)
		| (LOOKAHEAD(2) anyOperator() (LOOKAHEAD(3) expression() | enclosedExpression()))*
	  )
	)
	| set() (
	  (<SELECT> <VAR_NAME>)+
	  | (LOOKAHEAD(2) <SET_OP> set())*
	)
	| includedSet() (LOOKAHEAD(2) <SET_OP> includedSet())*
	| list() (LOOKAHEAD(2) <CONCAT> expression())*
	| number() (LOOKAHEAD(2) <OP> number())*
	| <STRING> ((<CONTAINS> (set()|<VAR_NAME>) | (LOOKAHEAD(2) <CONCAT> <STRING>)*))
	| <BOOLEAN> (LOOKAHEAD(2) <BOOLEAN_OP> <BOOLEAN>)*
	| builtinFunctions()
}

void builtinFunctions() throws Exception : {} {
	<IMPORT> (<STRING> | <VAR_NAME>)
    | <PRINT> (<STRING> | <VAR_NAME>)
	| <EXEC> <STRING> 
}

void singleExpression() throws Exception : {} {
	set() | <VAR_NAME> | list() | number() | <STRING> | <BOOLEAN>
}

void matches() throws Exception : {} {
	<MATCH> <VAR_NAME> 
	(LOOKAHEAD(2) <GUARD> expression() <GUARD_ARROW> expression())+
	(LOOKAHEAD(2) <GUARD> <GUARD_ARROW> expression())?
}

void guards() throws Exception : {} {
	(<GUARD> expression() <GUARD_ARROW> expression() <GUARD>)+
	(<GUARD_ARROW> expression())
}

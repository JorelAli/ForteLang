include {
    # Adds two parameters together
    add = x -> y -> x + y;

    basicOperation = 123.25 + 2;

    # Lists
    someList      = [1, 2];
    someOtherList = [3];
    emptyList     = [];

    ### Example with guards
    max = x -> y -> 
        | x > y ->> x
        | y > x ->> s
        | ->> y;###

    # Set operations
    union =      set1 -> set2 -> set1 /+ set2;
    intersect =  set1 -> set2 -> set1 /- set2;
    difference = set1 -> set2 -> set1 // set2;

    # Adds sets to scope of expressions
    myFunctions2 = include {
        myAdd = x -> y -> x + y;
    } in myAdd 2;

#    factorial = (input ->
#        | input == 0 ->> 1
#        | ->> input * (factorial (input - 1)));

    head' = list -> list ++ [2, 3, (2 + 2)];

    const = 4;

    p = x -> x;

    a = lambda -> lambda 2 3;
        
} in add ((x -> x) 2) 3

#add 2 3 #(x -> x) 2

#add (2) 3

#a add
#add (p 2) 3
#head' [] []
#head'
#head' [5, 6, 1, 0]
#add 1 2
#const + 10 #add (add 1 2) 3 #Expect 6 

include {
    #[##| Returns the number 2
    two = 2;

    ##| Checks whether an input String is a number
    ##| Type signature: isInt :: String -> Boolean
    isInt = x:str -> match x
        | '(\+|-)?[0-9]+' ->> true
        | ->> false;

    isEmpty = x -> match x
        | {} ->> true
        | [] ->> true
        | "" ->> true
        | ->> false;
    
    isEmpty' = x -> |>
        | x == {} || x == [] || x == "" ->> true
        | ->> false;

    ## genList = f -> size -> 
    ##     [f size];## ++ genList f (size - 1);

    apply = f:func -> input -> f input;

    map = l -> f -> match l
        | [] ->> []
        | ->> [f l] ++ map (tail l) f;

    someInnerFunc = f:func -> f;

    add = x -> y -> x + y;
    ]#

    #[ factorial = i:num -> match i
        | 1 ->> 1
        | ->> i * (factorial (i - 1)); ]#
    #[
    replaceWithOnes = l:list -> match l
        | [] ->> []
        | ->> [1] ++ replaceWithOnes (tail l);

    a = (x -> x);

    x = 2;

    something = include {
        test = 2;
    } in 5;
    ]#

    genList = f:func -> n:num -> match n
        | 0 ->> []
        | ->> genList f (n - 1) ++ [f n];

    map = f:func -> l:list -> match l
        | [] ->> []
        | ->> [f (head l)] ++ map f (tail l);

    five = a:list -> 5;

    return = a:list -> a ++ [2];

    add = x:num -> y:num -> x + y;

    mySet = { innerSet = { add = 2; }; };

} in mySet.innerSet."add" + 4 ##1 == 1## (genList (x -> x + 1) 10)

##{} /+ {a=2;}##add ##map (x -> x * x) [5]  ##map (x -> (3 * x)) [1] ##head [1, 2, 3] ##map (x -> (3 * x)) [1]

##add 2 3 ##map (x -> x) [1]

##return ((x -> x ++ x) [1]) ++ [123]

##map (x -> x * x) [5] 

##head ((map (x -> x * 10) [1, 2, 3, 4, 5, 6])) > 2


##(map (x -> x * 10) [1, 2, 3, 4, 5, 6]) ? (10 + 0) == true


##genList (x -> x) 10


##factorial 5

#[include { x = 5;
} in [x + x] ++ []]#
##[1, 2, 3, false, (x -> x)]

##|> | 2 == 2 ->> 2 | ->> 4 

## (x -> x) x

##replaceWithOnes [0, 0, 0]

 ##someInnerFunc (x -> x) 2

## replaceWithOnes [0, 0, 0]

## factorial 5

##add 2 3


## head(map [1, 2, 3] (x -> x + 1))

##{ a = 2; }.(isEmpty 2)
##isEmpty ""
##{a = {b=2;c=3;};}.a.(@print "b")

include {
    # Adds two parameters together
    add = x -> y -> x + y;

    # Square a number
    square = x -> x * x;

    numbers = 123.25 + 2;

    # Lists
    someList      = [x, y];
    someOtherList = [x];
    emptyList     = [];

    # Example with guards
    max = x -> y -> 
        | x > y ->> x
        | ->> y;
    
    # Set operations
    union =      set1 -> set2 -> set1 /+ set2;
    intersect =  set1 -> set2 -> set1 /- set2;
    difference = set1 -> set2 -> set1 // set2;

    ### Multiline comments
    are supported as well! ###

    # Constants
    number2 = 2;

    # Sets
    emptySet = {};
    simpleSet = {
        hello = 2;
        primes = [2, 3, 5, 7, 11];
        subtract = x -> y -> x - y;
    };

    # Adds sets to scope
    myFunctions = include {
        myAdd = x -> y -> x + y;
    } in {
        add2 = myAdd;
    };

    # Strings!
    strings = "hello, world!" ++ "hi";

    # And of course, they're natively multi-lined
    multiLineString = "hello
        world
        what's 
        up?";

    # Inner function calls must be surrounded by brackets
    reallyEmptySet = union (union {} {}) {};

    somethingElse = include {
        a = x -> y -> x + y;
    } in [
        (a b c), 
        c, 
        x, 
        y, 
        (x x)
        ];

    cons = a -> include {
        x = head a;
        xs = tail a;
    } in [x] ++ xs;

    guard = | x ->> y | ->> y;

    # Import an expression
    a = import "./someFile.fl";

    # Access a set
    set = {
        hello = "hello";
    }.hello;

    # Check if an element exists in a set
    set = "hello" ? {
        hello = "hello";
    };

    # Booleans!
    blah = true || false;

    # Impure sets
    a = impure {
        @b = run "echo 'hi'";
    }.@b;

} in @exec "hello"
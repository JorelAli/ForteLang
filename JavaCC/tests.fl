|>| std.all [

    ## Tests std.foldl' on lists
    std.foldl' (a -> b -> a + b) 0 [1, 2, 3] == 6,
    std.foldl' (a -> b -> a * b) 1 [1, 2, 3, 4, 5] == 120,

    ## Tests std.map function
    std.map (a -> 2) [1, 2, 3] == [2, 2, 2],
    head (std.map (a -> b -> a + b) [2]) 2 == 4,

    #[ Tests the following:
     - Include ... in expressions
     - Set accessing
     - Set comparisons
     - Set construction within a function
     - Basic data type declarations ]#
    include {
        isComplex = complex:set	-> complex ? "re" && complex ? "im";

        add = complex1:set -> complex2:set -> |>
            | (isComplex complex1) && (isComplex complex2) ->> {
                re = complex1.re + complex2.re;
                im = complex1.im + complex2.im;
            }
            | ->> {};
    } in add {re = 2; im = 1;} {re = 1; im = 3;} == {re=3;im=4;}
            

] 
 ->> @print "All tests passed!"
|->> @print "Tests failed :("